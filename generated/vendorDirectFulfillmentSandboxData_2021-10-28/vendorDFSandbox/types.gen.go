// Package vendorDFSandbox provides primitives to interact the openapi HTTP API.
//
// Code generated by go-sdk-codegen DO NOT EDIT.
package vendorDFSandbox

// Error defines model for Error.
type Error struct {

	// An error code that identifies the type of error that occured.
	Code string `json:"code"`

	// Additional details that can help the caller understand or fix the issue.
	Details *string `json:"details,omitempty"`

	// A message that describes the error condition.
	Message string `json:"message"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	Errors []Error `json:"errors"`
}

// GenerateOrderScenarioRequest defines model for GenerateOrderScenarioRequest.
type GenerateOrderScenarioRequest struct {

	// The list of test orders requested as indicated by party identifiers.
	Orders *[]OrderScenarioRequest `json:"orders,omitempty"`
}

// OrderScenarioRequest defines model for OrderScenarioRequest.
type OrderScenarioRequest struct {

	// The identification object for the party information. For example, warehouse code or vendor code. Please refer to specific party for more details.
	SellingParty PartyIdentification `json:"sellingParty"`

	// The identification object for the party information. For example, warehouse code or vendor code. Please refer to specific party for more details.
	ShipFromParty PartyIdentification `json:"shipFromParty"`
}

// Pagination defines model for Pagination.
type Pagination struct {
	NextToken *string `json:"nextToken,omitempty"`
}

// PartyIdentification defines model for PartyIdentification.
type PartyIdentification struct {

	// Assigned identification for the party. For example, warehouse code or vendor code. Please refer to specific party for more details.
	PartyId string `json:"partyId"`
}

// Scenario defines model for Scenario.
type Scenario struct {

	// A list of orders that can be used by the caller to test each life cycle or scenario.
	Orders []TestOrder `json:"orders"`

	// An identifier that identifies the type of scenario that user can use for testing.
	ScenarioId string `json:"scenarioId"`
}

// TestCaseData defines model for TestCaseData.
type TestCaseData struct {

	// Set of use cases that describes the possible test scenarios.
	Scenarios *[]Scenario `json:"scenarios,omitempty"`
}

// TestOrder defines model for TestOrder.
type TestOrder struct {

	// An error code that identifies the type of error that occurred.
	OrderId string `json:"orderId"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// The current processing status of the transaction.
	Status string `json:"status"`

	// The set of test case data returned in response to the test data request.
	TestCaseData *TestCaseData `json:"testCaseData,omitempty"`

	// The unique identifier returned in the response to the generateOrderScenarios request.
	TransactionId string `json:"transactionId"`
}

// TransactionReference defines model for TransactionReference.
type TransactionReference struct {
	TransactionId *string `json:"transactionId,omitempty"`
}

// TransactionStatus defines model for TransactionStatus.
type TransactionStatus struct {

	// The transaction details including the status. If the transaction was successful, also includes the requested test order data.
	TransactionStatus *Transaction `json:"transactionStatus,omitempty"`
}

// GenerateOrderScenariosJSONBody defines parameters for GenerateOrderScenarios.
type GenerateOrderScenariosJSONBody GenerateOrderScenarioRequest

// GenerateOrderScenariosRequestBody defines body for GenerateOrderScenarios for application/json ContentType.
type GenerateOrderScenariosJSONRequestBody GenerateOrderScenariosJSONBody
