// Package service provides primitives to interact the openapi HTTP API.
//
// Code generated by go-sdk-codegen DO NOT EDIT.
package service

import (
	"time"
)

// AddAppointmentRequest defines model for AddAppointmentRequest.
type AddAppointmentRequest struct {

	// The input appointment time details.
	AppointmentTime AppointmentTimeInput `json:"appointmentTime"`
}

// Address defines model for Address.
type Address struct {

	// The first line of the address.
	AddressLine1 string `json:"addressLine1"`

	// Additional address information, if required.
	AddressLine2 *string `json:"addressLine2,omitempty"`

	// Additional address information, if required.
	AddressLine3 *string `json:"addressLine3,omitempty"`

	// The city.
	City *string `json:"city,omitempty"`

	// The two digit country code, in ISO 3166-1 alpha-2 format.
	CountryCode *string `json:"countryCode,omitempty"`

	// The county.
	County *string `json:"county,omitempty"`

	// The district.
	District *string `json:"district,omitempty"`

	// The name of the person, business, or institution.
	Name string `json:"name"`

	// The phone number.
	Phone *string `json:"phone,omitempty"`

	// The postal code. This can contain letters, digits, spaces, and/or punctuation.
	PostalCode *string `json:"postalCode,omitempty"`

	// The state or region.
	StateOrRegion *string `json:"stateOrRegion,omitempty"`
}

// Appointment defines model for Appointment.
type Appointment struct {

	// The appointment identifier.
	AppointmentId *AppointmentId `json:"appointmentId,omitempty"`

	// The status of the appointment.
	AppointmentStatus *string `json:"appointmentStatus,omitempty"`

	// The time of the appointment window.
	AppointmentTime *AppointmentTime `json:"appointmentTime,omitempty"`

	// A list of technicians assigned to the service job.
	AssignedTechnicians *[]Technician `json:"assignedTechnicians,omitempty"`

	// Proof of Appointment (POA) details.
	Poa *Poa `json:"poa,omitempty"`

	// The appointment identifier.
	RescheduledAppointmentId *AppointmentId `json:"rescheduledAppointmentId,omitempty"`
}

// AppointmentId defines model for AppointmentId.
type AppointmentId string

// AppointmentResource defines model for AppointmentResource.
type AppointmentResource struct {

	// The resource identifier.
	ResourceId *string `json:"resourceId,omitempty"`
}

// AppointmentResources defines model for AppointmentResources.
type AppointmentResources []AppointmentResource

// AppointmentSlot defines model for AppointmentSlot.
type AppointmentSlot struct {

	// Number of resources for which a slot can be reserved.
	Capacity *int `json:"capacity,omitempty"`

	// Time window end time in ISO 8601 format.
	EndTime *time.Time `json:"endTime,omitempty"`

	// Time window start time in ISO 8601 format.
	StartTime *time.Time `json:"startTime,omitempty"`
}

// AppointmentSlotReport defines model for AppointmentSlotReport.
type AppointmentSlotReport struct {

	// A list of time windows along with associated capacity in which the service can be performed.
	AppointmentSlots *[]AppointmentSlot `json:"appointmentSlots,omitempty"`

	// End Time up to which the appointment slots are generated in ISO 8601 format.
	EndTime *time.Time `json:"endTime,omitempty"`

	// Defines the type of slots.
	SchedulingType *string `json:"schedulingType,omitempty"`

	// Start Time from which the appointment slots are generated in ISO 8601 format.
	StartTime *time.Time `json:"startTime,omitempty"`
}

// AppointmentTime defines model for AppointmentTime.
type AppointmentTime struct {

	// The duration of the appointment window, in minutes.
	DurationInMinutes int `json:"durationInMinutes"`

	// The date and time of the start of the appointment window in ISO 8601 format.
	StartTime time.Time `json:"startTime"`
}

// AppointmentTimeInput defines model for AppointmentTimeInput.
type AppointmentTimeInput struct {

	// The duration of an appointment in minutes.
	DurationInMinutes *int `json:"durationInMinutes,omitempty"`

	// The date, time in UTC for the start time of an appointment in ISO 8601 format.
	StartTime time.Time `json:"startTime"`
}

// AssignAppointmentResourcesRequest defines model for AssignAppointmentResourcesRequest.
type AssignAppointmentResourcesRequest struct {

	// List of resources that performs or performed job appointment fulfillment.
	Resources AppointmentResources `json:"resources"`
}

// AssignAppointmentResourcesResponse defines model for AssignAppointmentResourcesResponse.
type AssignAppointmentResourcesResponse struct {

	// A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`

	// The payload for the `assignAppointmentResource` operation.
	Payload *struct {

		// A list of warnings returned in the sucessful execution response of an API request.
		Warnings *WarningList `json:"warnings,omitempty"`
	} `json:"payload,omitempty"`
}

// AssociatedItem defines model for AssociatedItem.
type AssociatedItem struct {

	// The Amazon Standard Identification Number (ASIN) of the item.
	Asin *string `json:"asin,omitempty"`

	// The brand name of the item.
	BrandName *string `json:"brandName,omitempty"`

	// Delivery information for the item.
	ItemDelivery *ItemDelivery `json:"itemDelivery,omitempty"`

	// The status of the item.
	ItemStatus *string `json:"itemStatus,omitempty"`

	// The Amazon-defined identifier for an order placed by the buyer, in 3-7-7 format.
	OrderId *OrderId `json:"orderId,omitempty"`

	// The total number of items included in the order.
	Quantity *int `json:"quantity,omitempty"`

	// The title of the item.
	Title *string `json:"title,omitempty"`
}

// AvailabilityRecord defines model for AvailabilityRecord.
type AvailabilityRecord struct {

	// Signifies the capacity of a resource which is available.
	Capacity *int `json:"capacity,omitempty"`

	// Denotes the time till when the resource is available in a day in ISO-8601 format.
	EndTime time.Time `json:"endTime"`

	// Repeated occurrence of an event in a time range.
	Recurrence *Recurrence `json:"recurrence,omitempty"`

	// Denotes the time from when the resource is available in a day in ISO-8601 format.
	StartTime time.Time `json:"startTime"`
}

// AvailabilityRecords defines model for AvailabilityRecords.
type AvailabilityRecords []AvailabilityRecord

// Buyer defines model for Buyer.
type Buyer struct {

	// The identifier of the buyer.
	BuyerId *string `json:"buyerId,omitempty"`

	// When true, the service is for an Amazon Prime buyer.
	IsPrimeMember *bool `json:"isPrimeMember,omitempty"`

	// The name of the buyer.
	Name *string `json:"name,omitempty"`

	// The phone number of the buyer.
	Phone *string `json:"phone,omitempty"`
}

// CancelReservationResponse defines model for CancelReservationResponse.
type CancelReservationResponse struct {

	// A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`
}

// CancelServiceJobByServiceJobIdResponse defines model for CancelServiceJobByServiceJobIdResponse.
type CancelServiceJobByServiceJobIdResponse struct {

	// A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`
}

// CapacityType defines model for CapacityType.
type CapacityType string

// List of CapacityType
const (
	CapacityType_AVAILABLE_CAPACITY  CapacityType = "AVAILABLE_CAPACITY"
	CapacityType_ENCUMBERED_CAPACITY CapacityType = "ENCUMBERED_CAPACITY"
	CapacityType_RESERVED_CAPACITY   CapacityType = "RESERVED_CAPACITY"
	CapacityType_SCHEDULED_CAPACITY  CapacityType = "SCHEDULED_CAPACITY"
)

// CompleteServiceJobByServiceJobIdResponse defines model for CompleteServiceJobByServiceJobIdResponse.
type CompleteServiceJobByServiceJobIdResponse struct {

	// A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`
}

// CreateReservationRecord defines model for CreateReservationRecord.
type CreateReservationRecord struct {

	// A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`

	// Reservation object reduces the capacity of a resource.
	Reservation *Reservation `json:"reservation,omitempty"`

	// A list of warnings returned in the sucessful execution response of an API request.
	Warnings *WarningList `json:"warnings,omitempty"`
}

// CreateReservationRequest defines model for CreateReservationRequest.
type CreateReservationRequest struct {

	// Reservation object reduces the capacity of a resource.
	Reservation Reservation `json:"reservation"`

	// Resource (store) identifier.
	ResourceId string `json:"resourceId"`
}

// CreateReservationResponse defines model for CreateReservationResponse.
type CreateReservationResponse struct {

	// A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`

	// `CreateReservationRecord` entity contains the `Reservation` if there is an error/warning while performing the requested operation on it, otherwise it will contain the new `reservationId`.
	Payload *CreateReservationRecord `json:"payload,omitempty"`
}

// CreateServiceDocumentUploadDestination defines model for CreateServiceDocumentUploadDestination.
type CreateServiceDocumentUploadDestination struct {

	// A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`

	// Information about an upload destination.
	Payload *ServiceDocumentUploadDestination `json:"payload,omitempty"`
}

// DayOfWeek defines model for DayOfWeek.
type DayOfWeek string

// List of DayOfWeek
const (
	DayOfWeek_FRIDAY    DayOfWeek = "FRIDAY"
	DayOfWeek_MONDAY    DayOfWeek = "MONDAY"
	DayOfWeek_SATURDAY  DayOfWeek = "SATURDAY"
	DayOfWeek_SUNDAY    DayOfWeek = "SUNDAY"
	DayOfWeek_THURSDAY  DayOfWeek = "THURSDAY"
	DayOfWeek_TUESDAY   DayOfWeek = "TUESDAY"
	DayOfWeek_WEDNESDAY DayOfWeek = "WEDNESDAY"
)

// EncryptionDetails defines model for EncryptionDetails.
type EncryptionDetails struct {

	// The vector to encrypt or decrypt the document contents using Cipher Block Chaining (CBC).
	InitializationVector string `json:"initializationVector"`

	// The encryption key used to encrypt or decrypt the document contents.
	Key string `json:"key"`

	// The encryption standard required to encrypt or decrypt the document contents.
	Standard string `json:"standard"`
}

// Error defines model for Error.
type Error struct {

	// An error code that identifies the type of error that occurred.
	Code string `json:"code"`

	// Additional details that can help the caller understand or fix the issue.
	Details *string `json:"details,omitempty"`

	// The type of error.
	ErrorLevel *string `json:"errorLevel,omitempty"`

	// A message that describes the error condition in a human-readable form.
	Message string `json:"message"`
}

// ErrorList defines model for ErrorList.
type ErrorList []Error

// FixedSlot defines model for FixedSlot.
type FixedSlot struct {

	// Available capacity corresponding to the slot. This capacity represents the capacity available for allocation to reservations.
	AvailableCapacity *int32 `json:"availableCapacity,omitempty"`

	// Encumbered capacity corresponding to the slot. This capacity represents the capacity allocated for Amazon Jobs/Appointments/Orders.
	EncumberedCapacity *int32 `json:"encumberedCapacity,omitempty"`

	// Reserved capacity corresponding to the slot. This capacity represents the capacity made unavailable due to events like Breaks/Leaves/Lunch.
	ReservedCapacity *int32 `json:"reservedCapacity,omitempty"`

	// Scheduled capacity corresponding to the slot. This capacity represents the originally allocated capacity as per resource schedule.
	ScheduledCapacity *int32 `json:"scheduledCapacity,omitempty"`

	// Start date time of slot in ISO 8601 format with precision of seconds.
	StartDateTime *time.Time `json:"startDateTime,omitempty"`
}

// FixedSlotCapacity defines model for FixedSlotCapacity.
type FixedSlotCapacity struct {

	// Array of capacity slots in fixed slot format.
	Capacities *[]FixedSlot `json:"capacities,omitempty"`

	// Next page token, if there are more pages.
	NextPageToken *string `json:"nextPageToken,omitempty"`

	// Resource Identifier.
	ResourceId *string `json:"resourceId,omitempty"`

	// The duration of each slot which is returned. This value will be a multiple of 5 and fall in the following range: 5 <= `slotDuration` <= 360.
	SlotDuration *int32 `json:"slotDuration,omitempty"`
}

// FixedSlotCapacityErrors defines model for FixedSlotCapacityErrors.
type FixedSlotCapacityErrors struct {

	// A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`
}

// FixedSlotCapacityQuery defines model for FixedSlotCapacityQuery.
type FixedSlotCapacityQuery struct {

	// An array of capacity types which are being requested. Default value is `[SCHEDULED_CAPACITY]`.
	CapacityTypes *[]CapacityType `json:"capacityTypes,omitempty"`

	// End date time up to which the capacity slots are being requested in ISO 8601 format.
	EndDateTime time.Time `json:"endDateTime"`

	// Size in which slots are being requested. This value should be a multiple of 5 and fall in the range: 5 <= `slotDuration` <= 360.
	SlotDuration *int32 `json:"slotDuration,omitempty"`

	// Start date time from which the capacity slots are being requested in ISO 8601 format.
	StartDateTime time.Time `json:"startDateTime"`
}

// FulfillmentDocument defines model for FulfillmentDocument.
type FulfillmentDocument struct {

	// Sha256 hash of the file content. This value is used to determine if the file has been corrupted or tampered with during transit.
	ContentSha256 *string `json:"contentSha256,omitempty"`

	// The identifier of the upload destination. Get this value by calling the `createServiceDocumentUploadDestination` operation of the Services API.
	UploadDestinationId *string `json:"uploadDestinationId,omitempty"`
}

// FulfillmentDocuments defines model for FulfillmentDocuments.
type FulfillmentDocuments []FulfillmentDocument

// FulfillmentTime defines model for FulfillmentTime.
type FulfillmentTime struct {

	// The date, time in UTC of the fulfillment end time in ISO 8601 format.
	EndTime *time.Time `json:"endTime,omitempty"`

	// The date, time in UTC of the fulfillment start time in ISO 8601 format.
	StartTime *time.Time `json:"startTime,omitempty"`
}

// GetAppointmentSlotsResponse defines model for GetAppointmentSlotsResponse.
type GetAppointmentSlotsResponse struct {

	// A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`

	// Availability information as per the service context queried.
	Payload *AppointmentSlotReport `json:"payload,omitempty"`
}

// GetServiceJobByServiceJobIdResponse defines model for GetServiceJobByServiceJobIdResponse.
type GetServiceJobByServiceJobIdResponse struct {

	// A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`

	// The job details of a service.
	Payload *ServiceJob `json:"payload,omitempty"`
}

// GetServiceJobsResponse defines model for GetServiceJobsResponse.
type GetServiceJobsResponse struct {

	// A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`

	// The payload for the `getServiceJobs` operation.
	Payload *JobListing `json:"payload,omitempty"`
}

// ItemDelivery defines model for ItemDelivery.
type ItemDelivery struct {

	// The date and time of the latest Estimated Delivery Date (EDD) of all the items with an EDD. In ISO 8601 format.
	EstimatedDeliveryDate *time.Time `json:"estimatedDeliveryDate,omitempty"`

	// Promised delivery information for the item.
	ItemDeliveryPromise *ItemDeliveryPromise `json:"itemDeliveryPromise,omitempty"`
}

// ItemDeliveryPromise defines model for ItemDeliveryPromise.
type ItemDeliveryPromise struct {

	// The date and time of the end of the promised delivery window in ISO 8601 format.
	EndTime *time.Time `json:"endTime,omitempty"`

	// The date and time of the start of the promised delivery window in ISO 8601 format.
	StartTime *time.Time `json:"startTime,omitempty"`
}

// JobListing defines model for JobListing.
type JobListing struct {

	// List of job details for the given input.
	Jobs *[]ServiceJob `json:"jobs,omitempty"`

	// A generated string used to pass information to your next request. If `nextPageToken` is returned, pass the value of `nextPageToken` to the `pageToken` to get next results.
	NextPageToken *string `json:"nextPageToken,omitempty"`

	// A generated string used to pass information to your next request. If `previousPageToken` is returned, pass the value of `previousPageToken` to the `pageToken` to get previous page results.
	PreviousPageToken *string `json:"previousPageToken,omitempty"`

	// Total result size of the query result.
	TotalResultSize *int `json:"totalResultSize,omitempty"`
}

// OrderId defines model for OrderId.
type OrderId string

// Poa defines model for Poa.
type Poa struct {

	// The time of the appointment window.
	AppointmentTime *AppointmentTime `json:"appointmentTime,omitempty"`

	// The type of POA uploaded.
	PoaType *string `json:"poaType,omitempty"`

	// A list of technicians.
	Technicians *[]Technician `json:"technicians,omitempty"`

	// The date and time when the POA was uploaded in ISO 8601 format.
	UploadTime *time.Time `json:"uploadTime,omitempty"`

	// The identifier of the technician who uploaded the POA.
	UploadingTechnician *string `json:"uploadingTechnician,omitempty"`
}

// RangeCapacity defines model for RangeCapacity.
type RangeCapacity struct {

	// Type of capacity
	CapacityType *CapacityType `json:"capacityType,omitempty"`

	// Array of capacity slots in range slot format.
	Slots *[]RangeSlot `json:"slots,omitempty"`
}

// RangeSlot defines model for RangeSlot.
type RangeSlot struct {

	// Capacity of the slot.
	Capacity *int32 `json:"capacity,omitempty"`

	// End date time of slot in ISO 8601 format with precision of seconds.
	EndDateTime *time.Time `json:"endDateTime,omitempty"`

	// Start date time of slot in ISO 8601 format with precision of seconds.
	StartDateTime *time.Time `json:"startDateTime,omitempty"`
}

// RangeSlotCapacity defines model for RangeSlotCapacity.
type RangeSlotCapacity struct {

	// Array of range capacities where each entry is for a specific capacity type.
	Capacities *[]RangeCapacity `json:"capacities,omitempty"`

	// Next page token, if there are more pages.
	NextPageToken *string `json:"nextPageToken,omitempty"`

	// Resource Identifier.
	ResourceId *string `json:"resourceId,omitempty"`
}

// RangeSlotCapacityErrors defines model for RangeSlotCapacityErrors.
type RangeSlotCapacityErrors struct {

	// A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`
}

// RangeSlotCapacityQuery defines model for RangeSlotCapacityQuery.
type RangeSlotCapacityQuery struct {

	// An array of capacity types which are being requested. Default value is `[SCHEDULED_CAPACITY]`.
	CapacityTypes *[]CapacityType `json:"capacityTypes,omitempty"`

	// End date time up to which the capacity slots are being requested in ISO 8601 format.
	EndDateTime time.Time `json:"endDateTime"`

	// Start date time from which the capacity slots are being requested in ISO 8601 format.
	StartDateTime time.Time `json:"startDateTime"`
}

// Recurrence defines model for Recurrence.
type Recurrence struct {

	// Days of the month when recurrence is valid.
	DaysOfMonth *[]int `json:"daysOfMonth,omitempty"`

	// Days of the week when recurrence is valid. If the schedule is valid every Monday, input will only contain `MONDAY` in the list.
	DaysOfWeek *[]DayOfWeek `json:"daysOfWeek,omitempty"`

	// End time of the recurrence.
	EndTime time.Time `json:"endTime"`
}

// RescheduleAppointmentRequest defines model for RescheduleAppointmentRequest.
type RescheduleAppointmentRequest struct {

	// The input appointment time details.
	AppointmentTime AppointmentTimeInput `json:"appointmentTime"`

	// The appointment reschedule reason code.
	RescheduleReasonCode RescheduleReasonCode `json:"rescheduleReasonCode"`
}

// RescheduleReasonCode defines model for RescheduleReasonCode.
type RescheduleReasonCode string

// Reservation defines model for Reservation.
type Reservation struct {

	// `AvailabilityRecord` to represent the capacity of a resource over a time range.
	Availability AvailabilityRecord `json:"availability"`

	// Unique identifier for a reservation. If present, it is treated as an update reservation request and will update the corresponding reservation. Otherwise, it is treated as a new create reservation request.
	ReservationId *string `json:"reservationId,omitempty"`

	// Type of reservation.
	Type string `json:"type"`
}

// ScopeOfWork defines model for ScopeOfWork.
type ScopeOfWork struct {

	// The Amazon Standard Identification Number (ASIN) of the service job.
	Asin *string `json:"asin,omitempty"`

	// The number of service jobs.
	Quantity *int `json:"quantity,omitempty"`

	// A list of skills required to perform the job.
	RequiredSkills *[]string `json:"requiredSkills,omitempty"`

	// The title of the service job.
	Title *string `json:"title,omitempty"`
}

// Seller defines model for Seller.
type Seller struct {

	// The identifier of the seller of the service job.
	SellerId *string `json:"sellerId,omitempty"`
}

// ServiceDocumentUploadDestination defines model for ServiceDocumentUploadDestination.
type ServiceDocumentUploadDestination struct {

	// Encryption details for required client-side encryption and decryption of document contents.
	EncryptionDetails EncryptionDetails `json:"encryptionDetails"`

	// The headers to include in the upload request.
	Headers *map[string]interface{} `json:"headers,omitempty"`

	// The unique identifier to be used by APIs that reference the upload destination.
	UploadDestinationId string `json:"uploadDestinationId"`

	// The URL to which to upload the file.
	Url string `json:"url"`
}

// ServiceJob defines model for ServiceJob.
type ServiceJob struct {

	// A list of appointments.
	Appointments *[]Appointment `json:"appointments,omitempty"`

	// A list of items associated with the service job.
	AssociatedItems *[]AssociatedItem `json:"associatedItems,omitempty"`

	// Information about the buyer.
	Buyer *Buyer `json:"buyer,omitempty"`

	// The date and time of the creation of the job in ISO 8601 format.
	CreateTime *time.Time `json:"createTime,omitempty"`

	// The marketplace identifier.
	MarketplaceId *string `json:"marketplaceId,omitempty"`

	// A list of appointment windows preferred by the buyer. Included only if the buyer selected appointment windows when creating the order.
	PreferredAppointmentTimes *[]AppointmentTime `json:"preferredAppointmentTimes,omitempty"`

	// The scope of work for the order.
	ScopeOfWork *ScopeOfWork `json:"scopeOfWork,omitempty"`

	// Information about the seller of the service job.
	Seller *Seller `json:"seller,omitempty"`

	// Amazon identifier for the service job.
	ServiceJobId *ServiceJobId `json:"serviceJobId,omitempty"`

	// Information about the service job provider.
	ServiceJobProvider *ServiceJobProvider `json:"serviceJobProvider,omitempty"`

	// The status of the service job.
	ServiceJobStatus *string `json:"serviceJobStatus,omitempty"`

	// Information about the location of the service job.
	ServiceLocation *ServiceLocation `json:"serviceLocation,omitempty"`

	// The Amazon-defined identifier for an order placed by the buyer, in 3-7-7 format.
	ServiceOrderId *OrderId `json:"serviceOrderId,omitempty"`

	// The Amazon-defined identifier for the region scope.
	StoreId *string `json:"storeId,omitempty"`
}

// ServiceJobId defines model for ServiceJobId.
type ServiceJobId string

// ServiceJobProvider defines model for ServiceJobProvider.
type ServiceJobProvider struct {

	// The identifier of the service job provider.
	ServiceJobProviderId *string `json:"serviceJobProviderId,omitempty"`
}

// ServiceLocation defines model for ServiceLocation.
type ServiceLocation struct {

	// The shipping address for the service job.
	Address *Address `json:"address,omitempty"`

	// The location of the service job.
	ServiceLocationType *string `json:"serviceLocationType,omitempty"`
}

// ServiceUploadDocument defines model for ServiceUploadDocument.
type ServiceUploadDocument struct {

	// The content length of the to-be-uploaded file
	ContentLength int64 `json:"contentLength"`

	// An MD5 hash of the content to be submitted to the upload destination. This value is used to determine if the data has been corrupted or tampered with during transit.
	ContentMD5 *string `json:"contentMD5,omitempty"`

	// The content type of the to-be-uploaded file
	ContentType string `json:"contentType"`
}

// SetAppointmentFulfillmentDataRequest defines model for SetAppointmentFulfillmentDataRequest.
type SetAppointmentFulfillmentDataRequest struct {

	// List of resources that performs or performed job appointment fulfillment.
	AppointmentResources *AppointmentResources `json:"appointmentResources,omitempty"`

	// List of documents captured during service appointment fulfillment.
	FulfillmentDocuments *FulfillmentDocuments `json:"fulfillmentDocuments,omitempty"`

	// Input for fulfillment time details
	FulfillmentTime *FulfillmentTime `json:"fulfillmentTime,omitempty"`
}

// SetAppointmentResponse defines model for SetAppointmentResponse.
type SetAppointmentResponse struct {

	// The appointment identifier.
	AppointmentId *AppointmentId `json:"appointmentId,omitempty"`

	// A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`

	// A list of warnings returned in the sucessful execution response of an API request.
	Warnings *WarningList `json:"warnings,omitempty"`
}

// Technician defines model for Technician.
type Technician struct {

	// The name of the technician.
	Name *string `json:"name,omitempty"`

	// The technician identifier.
	TechnicianId *string `json:"technicianId,omitempty"`
}

// UpdateReservationRecord defines model for UpdateReservationRecord.
type UpdateReservationRecord struct {

	// A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`

	// Reservation object reduces the capacity of a resource.
	Reservation *Reservation `json:"reservation,omitempty"`

	// A list of warnings returned in the sucessful execution response of an API request.
	Warnings *WarningList `json:"warnings,omitempty"`
}

// UpdateReservationRequest defines model for UpdateReservationRequest.
type UpdateReservationRequest struct {

	// Reservation object reduces the capacity of a resource.
	Reservation Reservation `json:"reservation"`

	// Resource (store) identifier.
	ResourceId string `json:"resourceId"`
}

// UpdateReservationResponse defines model for UpdateReservationResponse.
type UpdateReservationResponse struct {

	// A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`

	// `UpdateReservationRecord` entity contains the `Reservation` if there is an error/warning while performing the requested operation on it, otherwise it will contain the new `reservationId`.
	Payload *UpdateReservationRecord `json:"payload,omitempty"`
}

// UpdateScheduleRecord defines model for UpdateScheduleRecord.
type UpdateScheduleRecord struct {

	// `AvailabilityRecord` to represent the capacity of a resource over a time range.
	Availability *AvailabilityRecord `json:"availability,omitempty"`

	// A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`

	// A list of warnings returned in the sucessful execution response of an API request.
	Warnings *WarningList `json:"warnings,omitempty"`
}

// UpdateScheduleRequest defines model for UpdateScheduleRequest.
type UpdateScheduleRequest struct {

	// List of `AvailabilityRecord`s to represent the capacity of a resource over a time range.
	Schedules AvailabilityRecords `json:"schedules"`
}

// UpdateScheduleResponse defines model for UpdateScheduleResponse.
type UpdateScheduleResponse struct {

	// A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`

	// Contains the `UpdateScheduleRecords` for which the error/warning has occurred.
	Payload *[]UpdateScheduleRecord `json:"payload,omitempty"`
}

// Warning defines model for Warning.
type Warning struct {

	// An warning code that identifies the type of warning that occurred.
	Code string `json:"code"`

	// Additional details that can help the caller understand or address the warning.
	Details *string `json:"details,omitempty"`

	// A message that describes the warning condition in a human-readable form.
	Message string `json:"message"`
}

// WarningList defines model for WarningList.
type WarningList []Warning

// GetAppointmentSlotsParams defines parameters for GetAppointmentSlots.
type GetAppointmentSlotsParams struct {

	// ASIN associated with the service.
	Asin string `json:"asin"`

	// Store identifier defining the region scope to retrive appointment slots.
	StoreId string `json:"storeId"`

	// An identifier for the marketplace for which appointment slots are queried
	MarketplaceIds []string `json:"marketplaceIds"`

	// A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If `startTime` is provided, `endTime` should also be provided. Default value is as per business configuration.
	StartTime *string `json:"startTime,omitempty"`

	// A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If `endTime` is provided, `startTime` should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days.
	EndTime *string `json:"endTime,omitempty"`
}

// CreateServiceDocumentUploadDestinationJSONBody defines parameters for CreateServiceDocumentUploadDestination.
type CreateServiceDocumentUploadDestinationJSONBody ServiceUploadDocument

// CreateReservationJSONBody defines parameters for CreateReservation.
type CreateReservationJSONBody CreateReservationRequest

// CreateReservationParams defines parameters for CreateReservation.
type CreateReservationParams struct {

	// An identifier for the marketplace in which the resource operates.
	MarketplaceIds []string `json:"marketplaceIds"`
}

// CancelReservationParams defines parameters for CancelReservation.
type CancelReservationParams struct {

	// An identifier for the marketplace in which the resource operates.
	MarketplaceIds []string `json:"marketplaceIds"`
}

// UpdateReservationJSONBody defines parameters for UpdateReservation.
type UpdateReservationJSONBody UpdateReservationRequest

// UpdateReservationParams defines parameters for UpdateReservation.
type UpdateReservationParams struct {

	// An identifier for the marketplace in which the resource operates.
	MarketplaceIds []string `json:"marketplaceIds"`
}

// GetServiceJobsParams defines parameters for GetServiceJobs.
type GetServiceJobsParams struct {

	// List of service order ids for the query you want to perform.Max values supported 20.
	ServiceOrderIds *[]string `json:"serviceOrderIds,omitempty"`

	// A list of one or more job status by which to filter the list of jobs.
	ServiceJobStatus *[]string `json:"serviceJobStatus,omitempty"`

	// String returned in the response of your previous request.
	PageToken *string `json:"pageToken,omitempty"`

	// A non-negative integer that indicates the maximum number of jobs to return in the list, Value must be 1 - 20. Default 20.
	PageSize *int `json:"pageSize,omitempty"`

	// Sort fields on which you want to sort the output.
	SortField *string `json:"sortField,omitempty"`

	// Sort order for the query you want to perform.
	SortOrder *string `json:"sortOrder,omitempty"`

	// A date used for selecting jobs created at or after a specified time. Must be in ISO 8601 format. Required if `LastUpdatedAfter` is not specified. Specifying both `CreatedAfter` and `LastUpdatedAfter` returns an error.
	CreatedAfter *string `json:"createdAfter,omitempty"`

	// A date used for selecting jobs created at or before a specified time. Must be in ISO 8601 format.
	CreatedBefore *string `json:"createdBefore,omitempty"`

	// A date used for selecting jobs updated at or after a specified time. Must be in ISO 8601 format. Required if `createdAfter` is not specified. Specifying both `CreatedAfter` and `LastUpdatedAfter` returns an error.
	LastUpdatedAfter *string `json:"lastUpdatedAfter,omitempty"`

	// A date used for selecting jobs updated at or before a specified time. Must be in ISO 8601 format.
	LastUpdatedBefore *string `json:"lastUpdatedBefore,omitempty"`

	// A date used for filtering jobs schedules at or after a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date.
	ScheduleStartDate *string `json:"scheduleStartDate,omitempty"`

	// A date used for filtering jobs schedules at or before a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date.
	ScheduleEndDate *string `json:"scheduleEndDate,omitempty"`

	// Used to select jobs that were placed in the specified marketplaces.
	MarketplaceIds []string `json:"marketplaceIds"`

	// List of Amazon Standard Identification Numbers (ASIN) of the items. Max values supported is 20.
	Asins *[]string `json:"asins,omitempty"`

	// A defined set of related knowledge, skills, experience, tools, materials, and work processes common to service delivery for a set of products and/or service scenarios. Max values supported is 20.
	RequiredSkills *[]string `json:"requiredSkills,omitempty"`

	// List of Amazon-defined identifiers for the region scope. Max values supported is 50.
	StoreIds *[]string `json:"storeIds,omitempty"`
}

// GetAppointmmentSlotsByJobIdParams defines parameters for GetAppointmmentSlotsByJobId.
type GetAppointmmentSlotsByJobIdParams struct {

	// An identifier for the marketplace in which the resource operates.
	MarketplaceIds []string `json:"marketplaceIds"`

	// A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If `startTime` is provided, `endTime` should also be provided. Default value is as per business configuration.
	StartTime *string `json:"startTime,omitempty"`

	// A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If `endTime` is provided, `startTime` should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days.
	EndTime *string `json:"endTime,omitempty"`
}

// AddAppointmentForServiceJobByServiceJobIdJSONBody defines parameters for AddAppointmentForServiceJobByServiceJobId.
type AddAppointmentForServiceJobByServiceJobIdJSONBody AddAppointmentRequest

// RescheduleAppointmentForServiceJobByServiceJobIdJSONBody defines parameters for RescheduleAppointmentForServiceJobByServiceJobId.
type RescheduleAppointmentForServiceJobByServiceJobIdJSONBody RescheduleAppointmentRequest

// SetAppointmentFulfillmentDataJSONBody defines parameters for SetAppointmentFulfillmentData.
type SetAppointmentFulfillmentDataJSONBody SetAppointmentFulfillmentDataRequest

// AssignAppointmentResourcesJSONBody defines parameters for AssignAppointmentResources.
type AssignAppointmentResourcesJSONBody AssignAppointmentResourcesRequest

// CancelServiceJobByServiceJobIdParams defines parameters for CancelServiceJobByServiceJobId.
type CancelServiceJobByServiceJobIdParams struct {

	// A cancel reason code that specifies the reason for cancelling a service job.
	CancellationReasonCode string `json:"cancellationReasonCode"`
}

// GetFixedSlotCapacityJSONBody defines parameters for GetFixedSlotCapacity.
type GetFixedSlotCapacityJSONBody FixedSlotCapacityQuery

// GetFixedSlotCapacityParams defines parameters for GetFixedSlotCapacity.
type GetFixedSlotCapacityParams struct {

	// An identifier for the marketplace in which the resource operates.
	MarketplaceIds []string `json:"marketplaceIds"`

	// Next page token returned in the response of your previous request.
	NextPageToken *string `json:"nextPageToken,omitempty"`
}

// GetRangeSlotCapacityJSONBody defines parameters for GetRangeSlotCapacity.
type GetRangeSlotCapacityJSONBody RangeSlotCapacityQuery

// GetRangeSlotCapacityParams defines parameters for GetRangeSlotCapacity.
type GetRangeSlotCapacityParams struct {

	// An identifier for the marketplace in which the resource operates.
	MarketplaceIds []string `json:"marketplaceIds"`

	// Next page token returned in the response of your previous request.
	NextPageToken *string `json:"nextPageToken,omitempty"`
}

// UpdateScheduleJSONBody defines parameters for UpdateSchedule.
type UpdateScheduleJSONBody UpdateScheduleRequest

// UpdateScheduleParams defines parameters for UpdateSchedule.
type UpdateScheduleParams struct {

	// An identifier for the marketplace in which the resource operates.
	MarketplaceIds []string `json:"marketplaceIds"`
}

// CreateServiceDocumentUploadDestinationRequestBody defines body for CreateServiceDocumentUploadDestination for application/json ContentType.
type CreateServiceDocumentUploadDestinationJSONRequestBody CreateServiceDocumentUploadDestinationJSONBody

// CreateReservationRequestBody defines body for CreateReservation for application/json ContentType.
type CreateReservationJSONRequestBody CreateReservationJSONBody

// UpdateReservationRequestBody defines body for UpdateReservation for application/json ContentType.
type UpdateReservationJSONRequestBody UpdateReservationJSONBody

// AddAppointmentForServiceJobByServiceJobIdRequestBody defines body for AddAppointmentForServiceJobByServiceJobId for application/json ContentType.
type AddAppointmentForServiceJobByServiceJobIdJSONRequestBody AddAppointmentForServiceJobByServiceJobIdJSONBody

// RescheduleAppointmentForServiceJobByServiceJobIdRequestBody defines body for RescheduleAppointmentForServiceJobByServiceJobId for application/json ContentType.
type RescheduleAppointmentForServiceJobByServiceJobIdJSONRequestBody RescheduleAppointmentForServiceJobByServiceJobIdJSONBody

// SetAppointmentFulfillmentDataRequestBody defines body for SetAppointmentFulfillmentData for application/json ContentType.
type SetAppointmentFulfillmentDataJSONRequestBody SetAppointmentFulfillmentDataJSONBody

// AssignAppointmentResourcesRequestBody defines body for AssignAppointmentResources for application/json ContentType.
type AssignAppointmentResourcesJSONRequestBody AssignAppointmentResourcesJSONBody

// GetFixedSlotCapacityRequestBody defines body for GetFixedSlotCapacity for application/json ContentType.
type GetFixedSlotCapacityJSONRequestBody GetFixedSlotCapacityJSONBody

// GetRangeSlotCapacityRequestBody defines body for GetRangeSlotCapacity for application/json ContentType.
type GetRangeSlotCapacityJSONRequestBody GetRangeSlotCapacityJSONBody

// UpdateScheduleRequestBody defines body for UpdateSchedule for application/json ContentType.
type UpdateScheduleJSONRequestBody UpdateScheduleJSONBody
