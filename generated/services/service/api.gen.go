// Package service provides primitives to interact the openapi HTTP API.
//
// Code generated by go-sdk-codegen DO NOT EDIT.
package service

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	runt "runtime"
	"strings"

	"gopkg.me/selling-partner-api-sdk/pkg/runtime"
)

// RequestBeforeFn  is the function signature for the RequestBefore callback function
type RequestBeforeFn func(ctx context.Context, req *http.Request) error

// ResponseAfterFn  is the function signature for the ResponseAfter callback function
type ResponseAfterFn func(ctx context.Context, rsp *http.Response) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Endpoint string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A callback for modifying requests which are generated before sending over
	// the network.
	RequestBefore RequestBeforeFn

	// A callback for modifying response which are generated before sending over
	// the network.
	ResponseAfter ResponseAfterFn

	// The user agent header identifies your application, its version number, and the platform and programming language you are using.
	// You must include a user agent header in each request submitted to the sales partner API.
	UserAgent string
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(endpoint string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Endpoint: endpoint,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the endpoint URL always has a trailing slash
	if !strings.HasSuffix(client.Endpoint, "/") {
		client.Endpoint += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = http.DefaultClient
	}
	// setting the default useragent
	if client.UserAgent == "" {
		client.UserAgent = fmt.Sprintf("selling-partner-api-sdk/v1.0 (Language=%s; Platform=%s-%s)", strings.Replace(runt.Version(), "go", "go/", -1), runt.GOOS, runt.GOARCH)
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithUserAgent set up useragent
// add user agent to every request automatically
func WithUserAgent(userAgent string) ClientOption {
	return func(c *Client) error {
		c.UserAgent = userAgent
		return nil
	}
}

// WithRequestBefore allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestBefore(fn RequestBeforeFn) ClientOption {
	return func(c *Client) error {
		c.RequestBefore = fn
		return nil
	}
}

// WithResponseAfter allows setting up a callback function, which will be
// called right after get response the request. This can be used to log.
func WithResponseAfter(fn ResponseAfterFn) ClientOption {
	return func(c *Client) error {
		c.ResponseAfter = fn
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAppointmentSlots request
	GetAppointmentSlots(ctx context.Context, params *GetAppointmentSlotsParams) (*http.Response, error)

	// CreateServiceDocumentUploadDestination request  with any body
	CreateServiceDocumentUploadDestinationWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateServiceDocumentUploadDestination(ctx context.Context, body CreateServiceDocumentUploadDestinationJSONRequestBody) (*http.Response, error)

	// CreateReservation request  with any body
	CreateReservationWithBody(ctx context.Context, params *CreateReservationParams, contentType string, body io.Reader) (*http.Response, error)

	CreateReservation(ctx context.Context, params *CreateReservationParams, body CreateReservationJSONRequestBody) (*http.Response, error)

	// CancelReservation request
	CancelReservation(ctx context.Context, reservationId string, params *CancelReservationParams) (*http.Response, error)

	// UpdateReservation request  with any body
	UpdateReservationWithBody(ctx context.Context, reservationId string, params *UpdateReservationParams, contentType string, body io.Reader) (*http.Response, error)

	UpdateReservation(ctx context.Context, reservationId string, params *UpdateReservationParams, body UpdateReservationJSONRequestBody) (*http.Response, error)

	// GetServiceJobs request
	GetServiceJobs(ctx context.Context, params *GetServiceJobsParams) (*http.Response, error)

	// GetServiceJobByServiceJobId request
	GetServiceJobByServiceJobId(ctx context.Context, serviceJobId string) (*http.Response, error)

	// GetAppointmmentSlotsByJobId request
	GetAppointmmentSlotsByJobId(ctx context.Context, serviceJobId string, params *GetAppointmmentSlotsByJobIdParams) (*http.Response, error)

	// AddAppointmentForServiceJobByServiceJobId request  with any body
	AddAppointmentForServiceJobByServiceJobIdWithBody(ctx context.Context, serviceJobId string, contentType string, body io.Reader) (*http.Response, error)

	AddAppointmentForServiceJobByServiceJobId(ctx context.Context, serviceJobId string, body AddAppointmentForServiceJobByServiceJobIdJSONRequestBody) (*http.Response, error)

	// RescheduleAppointmentForServiceJobByServiceJobId request  with any body
	RescheduleAppointmentForServiceJobByServiceJobIdWithBody(ctx context.Context, serviceJobId string, appointmentId string, contentType string, body io.Reader) (*http.Response, error)

	RescheduleAppointmentForServiceJobByServiceJobId(ctx context.Context, serviceJobId string, appointmentId string, body RescheduleAppointmentForServiceJobByServiceJobIdJSONRequestBody) (*http.Response, error)

	// SetAppointmentFulfillmentData request  with any body
	SetAppointmentFulfillmentDataWithBody(ctx context.Context, serviceJobId string, appointmentId string, contentType string, body io.Reader) (*http.Response, error)

	SetAppointmentFulfillmentData(ctx context.Context, serviceJobId string, appointmentId string, body SetAppointmentFulfillmentDataJSONRequestBody) (*http.Response, error)

	// AssignAppointmentResources request  with any body
	AssignAppointmentResourcesWithBody(ctx context.Context, serviceJobId string, appointmentId string, contentType string, body io.Reader) (*http.Response, error)

	AssignAppointmentResources(ctx context.Context, serviceJobId string, appointmentId string, body AssignAppointmentResourcesJSONRequestBody) (*http.Response, error)

	// CancelServiceJobByServiceJobId request
	CancelServiceJobByServiceJobId(ctx context.Context, serviceJobId string, params *CancelServiceJobByServiceJobIdParams) (*http.Response, error)

	// CompleteServiceJobByServiceJobId request
	CompleteServiceJobByServiceJobId(ctx context.Context, serviceJobId string) (*http.Response, error)

	// GetFixedSlotCapacity request  with any body
	GetFixedSlotCapacityWithBody(ctx context.Context, resourceId string, params *GetFixedSlotCapacityParams, contentType string, body io.Reader) (*http.Response, error)

	GetFixedSlotCapacity(ctx context.Context, resourceId string, params *GetFixedSlotCapacityParams, body GetFixedSlotCapacityJSONRequestBody) (*http.Response, error)

	// GetRangeSlotCapacity request  with any body
	GetRangeSlotCapacityWithBody(ctx context.Context, resourceId string, params *GetRangeSlotCapacityParams, contentType string, body io.Reader) (*http.Response, error)

	GetRangeSlotCapacity(ctx context.Context, resourceId string, params *GetRangeSlotCapacityParams, body GetRangeSlotCapacityJSONRequestBody) (*http.Response, error)

	// UpdateSchedule request  with any body
	UpdateScheduleWithBody(ctx context.Context, resourceId string, params *UpdateScheduleParams, contentType string, body io.Reader) (*http.Response, error)

	UpdateSchedule(ctx context.Context, resourceId string, params *UpdateScheduleParams, body UpdateScheduleJSONRequestBody) (*http.Response, error)
}

func (c *Client) GetAppointmentSlots(ctx context.Context, params *GetAppointmentSlotsParams) (*http.Response, error) {
	req, err := NewGetAppointmentSlotsRequest(c.Endpoint, params)
	if err != nil {
		return nil, err
	}

	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if c.RequestBefore != nil {
		err = c.RequestBefore(ctx, req)
		if err != nil {
			return nil, err
		}
	}

	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}

	if c.ResponseAfter != nil {
		err = c.ResponseAfter(ctx, rsp)
		if err != nil {
			return nil, err
		}
	}
	return rsp, nil
}

func (c *Client) CreateServiceDocumentUploadDestinationWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateServiceDocumentUploadDestinationRequestWithBody(c.Endpoint, contentType, body)
	if err != nil {
		return nil, err
	}

	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if c.RequestBefore != nil {
		err = c.RequestBefore(ctx, req)
		if err != nil {
			return nil, err
		}
	}

	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}

	if c.ResponseAfter != nil {
		err = c.ResponseAfter(ctx, rsp)
		if err != nil {
			return nil, err
		}
	}
	return rsp, nil
}

func (c *Client) CreateServiceDocumentUploadDestination(ctx context.Context, body CreateServiceDocumentUploadDestinationJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateServiceDocumentUploadDestinationRequest(c.Endpoint, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestBefore != nil {
		err = c.RequestBefore(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateReservationWithBody(ctx context.Context, params *CreateReservationParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateReservationRequestWithBody(c.Endpoint, params, contentType, body)
	if err != nil {
		return nil, err
	}

	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if c.RequestBefore != nil {
		err = c.RequestBefore(ctx, req)
		if err != nil {
			return nil, err
		}
	}

	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}

	if c.ResponseAfter != nil {
		err = c.ResponseAfter(ctx, rsp)
		if err != nil {
			return nil, err
		}
	}
	return rsp, nil
}

func (c *Client) CreateReservation(ctx context.Context, params *CreateReservationParams, body CreateReservationJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateReservationRequest(c.Endpoint, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestBefore != nil {
		err = c.RequestBefore(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CancelReservation(ctx context.Context, reservationId string, params *CancelReservationParams) (*http.Response, error) {
	req, err := NewCancelReservationRequest(c.Endpoint, reservationId, params)
	if err != nil {
		return nil, err
	}

	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if c.RequestBefore != nil {
		err = c.RequestBefore(ctx, req)
		if err != nil {
			return nil, err
		}
	}

	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}

	if c.ResponseAfter != nil {
		err = c.ResponseAfter(ctx, rsp)
		if err != nil {
			return nil, err
		}
	}
	return rsp, nil
}

func (c *Client) UpdateReservationWithBody(ctx context.Context, reservationId string, params *UpdateReservationParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateReservationRequestWithBody(c.Endpoint, reservationId, params, contentType, body)
	if err != nil {
		return nil, err
	}

	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if c.RequestBefore != nil {
		err = c.RequestBefore(ctx, req)
		if err != nil {
			return nil, err
		}
	}

	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}

	if c.ResponseAfter != nil {
		err = c.ResponseAfter(ctx, rsp)
		if err != nil {
			return nil, err
		}
	}
	return rsp, nil
}

func (c *Client) UpdateReservation(ctx context.Context, reservationId string, params *UpdateReservationParams, body UpdateReservationJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateReservationRequest(c.Endpoint, reservationId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestBefore != nil {
		err = c.RequestBefore(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceJobs(ctx context.Context, params *GetServiceJobsParams) (*http.Response, error) {
	req, err := NewGetServiceJobsRequest(c.Endpoint, params)
	if err != nil {
		return nil, err
	}

	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if c.RequestBefore != nil {
		err = c.RequestBefore(ctx, req)
		if err != nil {
			return nil, err
		}
	}

	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}

	if c.ResponseAfter != nil {
		err = c.ResponseAfter(ctx, rsp)
		if err != nil {
			return nil, err
		}
	}
	return rsp, nil
}

func (c *Client) GetServiceJobByServiceJobId(ctx context.Context, serviceJobId string) (*http.Response, error) {
	req, err := NewGetServiceJobByServiceJobIdRequest(c.Endpoint, serviceJobId)
	if err != nil {
		return nil, err
	}

	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if c.RequestBefore != nil {
		err = c.RequestBefore(ctx, req)
		if err != nil {
			return nil, err
		}
	}

	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}

	if c.ResponseAfter != nil {
		err = c.ResponseAfter(ctx, rsp)
		if err != nil {
			return nil, err
		}
	}
	return rsp, nil
}

func (c *Client) GetAppointmmentSlotsByJobId(ctx context.Context, serviceJobId string, params *GetAppointmmentSlotsByJobIdParams) (*http.Response, error) {
	req, err := NewGetAppointmmentSlotsByJobIdRequest(c.Endpoint, serviceJobId, params)
	if err != nil {
		return nil, err
	}

	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if c.RequestBefore != nil {
		err = c.RequestBefore(ctx, req)
		if err != nil {
			return nil, err
		}
	}

	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}

	if c.ResponseAfter != nil {
		err = c.ResponseAfter(ctx, rsp)
		if err != nil {
			return nil, err
		}
	}
	return rsp, nil
}

func (c *Client) AddAppointmentForServiceJobByServiceJobIdWithBody(ctx context.Context, serviceJobId string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewAddAppointmentForServiceJobByServiceJobIdRequestWithBody(c.Endpoint, serviceJobId, contentType, body)
	if err != nil {
		return nil, err
	}

	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if c.RequestBefore != nil {
		err = c.RequestBefore(ctx, req)
		if err != nil {
			return nil, err
		}
	}

	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}

	if c.ResponseAfter != nil {
		err = c.ResponseAfter(ctx, rsp)
		if err != nil {
			return nil, err
		}
	}
	return rsp, nil
}

func (c *Client) AddAppointmentForServiceJobByServiceJobId(ctx context.Context, serviceJobId string, body AddAppointmentForServiceJobByServiceJobIdJSONRequestBody) (*http.Response, error) {
	req, err := NewAddAppointmentForServiceJobByServiceJobIdRequest(c.Endpoint, serviceJobId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestBefore != nil {
		err = c.RequestBefore(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RescheduleAppointmentForServiceJobByServiceJobIdWithBody(ctx context.Context, serviceJobId string, appointmentId string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewRescheduleAppointmentForServiceJobByServiceJobIdRequestWithBody(c.Endpoint, serviceJobId, appointmentId, contentType, body)
	if err != nil {
		return nil, err
	}

	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if c.RequestBefore != nil {
		err = c.RequestBefore(ctx, req)
		if err != nil {
			return nil, err
		}
	}

	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}

	if c.ResponseAfter != nil {
		err = c.ResponseAfter(ctx, rsp)
		if err != nil {
			return nil, err
		}
	}
	return rsp, nil
}

func (c *Client) RescheduleAppointmentForServiceJobByServiceJobId(ctx context.Context, serviceJobId string, appointmentId string, body RescheduleAppointmentForServiceJobByServiceJobIdJSONRequestBody) (*http.Response, error) {
	req, err := NewRescheduleAppointmentForServiceJobByServiceJobIdRequest(c.Endpoint, serviceJobId, appointmentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestBefore != nil {
		err = c.RequestBefore(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SetAppointmentFulfillmentDataWithBody(ctx context.Context, serviceJobId string, appointmentId string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewSetAppointmentFulfillmentDataRequestWithBody(c.Endpoint, serviceJobId, appointmentId, contentType, body)
	if err != nil {
		return nil, err
	}

	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if c.RequestBefore != nil {
		err = c.RequestBefore(ctx, req)
		if err != nil {
			return nil, err
		}
	}

	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}

	if c.ResponseAfter != nil {
		err = c.ResponseAfter(ctx, rsp)
		if err != nil {
			return nil, err
		}
	}
	return rsp, nil
}

func (c *Client) SetAppointmentFulfillmentData(ctx context.Context, serviceJobId string, appointmentId string, body SetAppointmentFulfillmentDataJSONRequestBody) (*http.Response, error) {
	req, err := NewSetAppointmentFulfillmentDataRequest(c.Endpoint, serviceJobId, appointmentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestBefore != nil {
		err = c.RequestBefore(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AssignAppointmentResourcesWithBody(ctx context.Context, serviceJobId string, appointmentId string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewAssignAppointmentResourcesRequestWithBody(c.Endpoint, serviceJobId, appointmentId, contentType, body)
	if err != nil {
		return nil, err
	}

	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if c.RequestBefore != nil {
		err = c.RequestBefore(ctx, req)
		if err != nil {
			return nil, err
		}
	}

	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}

	if c.ResponseAfter != nil {
		err = c.ResponseAfter(ctx, rsp)
		if err != nil {
			return nil, err
		}
	}
	return rsp, nil
}

func (c *Client) AssignAppointmentResources(ctx context.Context, serviceJobId string, appointmentId string, body AssignAppointmentResourcesJSONRequestBody) (*http.Response, error) {
	req, err := NewAssignAppointmentResourcesRequest(c.Endpoint, serviceJobId, appointmentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestBefore != nil {
		err = c.RequestBefore(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CancelServiceJobByServiceJobId(ctx context.Context, serviceJobId string, params *CancelServiceJobByServiceJobIdParams) (*http.Response, error) {
	req, err := NewCancelServiceJobByServiceJobIdRequest(c.Endpoint, serviceJobId, params)
	if err != nil {
		return nil, err
	}

	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if c.RequestBefore != nil {
		err = c.RequestBefore(ctx, req)
		if err != nil {
			return nil, err
		}
	}

	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}

	if c.ResponseAfter != nil {
		err = c.ResponseAfter(ctx, rsp)
		if err != nil {
			return nil, err
		}
	}
	return rsp, nil
}

func (c *Client) CompleteServiceJobByServiceJobId(ctx context.Context, serviceJobId string) (*http.Response, error) {
	req, err := NewCompleteServiceJobByServiceJobIdRequest(c.Endpoint, serviceJobId)
	if err != nil {
		return nil, err
	}

	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if c.RequestBefore != nil {
		err = c.RequestBefore(ctx, req)
		if err != nil {
			return nil, err
		}
	}

	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}

	if c.ResponseAfter != nil {
		err = c.ResponseAfter(ctx, rsp)
		if err != nil {
			return nil, err
		}
	}
	return rsp, nil
}

func (c *Client) GetFixedSlotCapacityWithBody(ctx context.Context, resourceId string, params *GetFixedSlotCapacityParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewGetFixedSlotCapacityRequestWithBody(c.Endpoint, resourceId, params, contentType, body)
	if err != nil {
		return nil, err
	}

	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if c.RequestBefore != nil {
		err = c.RequestBefore(ctx, req)
		if err != nil {
			return nil, err
		}
	}

	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}

	if c.ResponseAfter != nil {
		err = c.ResponseAfter(ctx, rsp)
		if err != nil {
			return nil, err
		}
	}
	return rsp, nil
}

func (c *Client) GetFixedSlotCapacity(ctx context.Context, resourceId string, params *GetFixedSlotCapacityParams, body GetFixedSlotCapacityJSONRequestBody) (*http.Response, error) {
	req, err := NewGetFixedSlotCapacityRequest(c.Endpoint, resourceId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestBefore != nil {
		err = c.RequestBefore(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetRangeSlotCapacityWithBody(ctx context.Context, resourceId string, params *GetRangeSlotCapacityParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewGetRangeSlotCapacityRequestWithBody(c.Endpoint, resourceId, params, contentType, body)
	if err != nil {
		return nil, err
	}

	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if c.RequestBefore != nil {
		err = c.RequestBefore(ctx, req)
		if err != nil {
			return nil, err
		}
	}

	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}

	if c.ResponseAfter != nil {
		err = c.ResponseAfter(ctx, rsp)
		if err != nil {
			return nil, err
		}
	}
	return rsp, nil
}

func (c *Client) GetRangeSlotCapacity(ctx context.Context, resourceId string, params *GetRangeSlotCapacityParams, body GetRangeSlotCapacityJSONRequestBody) (*http.Response, error) {
	req, err := NewGetRangeSlotCapacityRequest(c.Endpoint, resourceId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestBefore != nil {
		err = c.RequestBefore(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateScheduleWithBody(ctx context.Context, resourceId string, params *UpdateScheduleParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateScheduleRequestWithBody(c.Endpoint, resourceId, params, contentType, body)
	if err != nil {
		return nil, err
	}

	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if c.RequestBefore != nil {
		err = c.RequestBefore(ctx, req)
		if err != nil {
			return nil, err
		}
	}

	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}

	if c.ResponseAfter != nil {
		err = c.ResponseAfter(ctx, rsp)
		if err != nil {
			return nil, err
		}
	}
	return rsp, nil
}

func (c *Client) UpdateSchedule(ctx context.Context, resourceId string, params *UpdateScheduleParams, body UpdateScheduleJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateScheduleRequest(c.Endpoint, resourceId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestBefore != nil {
		err = c.RequestBefore(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// NewGetAppointmentSlotsRequest generates requests for GetAppointmentSlots
func NewGetAppointmentSlotsRequest(endpoint string, params *GetAppointmentSlotsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(endpoint)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/service/v1/appointmentSlots")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "asin", params.Asin); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "storeId", params.StoreId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "marketplaceIds", params.MarketplaceIds); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.StartTime != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "startTime", *params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndTime != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "endTime", *params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateServiceDocumentUploadDestinationRequest calls the generic CreateServiceDocumentUploadDestination builder with application/json body
func NewCreateServiceDocumentUploadDestinationRequest(endpoint string, body CreateServiceDocumentUploadDestinationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateServiceDocumentUploadDestinationRequestWithBody(endpoint, "application/json", bodyReader)
}

// NewCreateServiceDocumentUploadDestinationRequestWithBody generates requests for CreateServiceDocumentUploadDestination with any type of body
func NewCreateServiceDocumentUploadDestinationRequestWithBody(endpoint string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(endpoint)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/service/v1/documents")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewCreateReservationRequest calls the generic CreateReservation builder with application/json body
func NewCreateReservationRequest(endpoint string, params *CreateReservationParams, body CreateReservationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateReservationRequestWithBody(endpoint, params, "application/json", bodyReader)
}

// NewCreateReservationRequestWithBody generates requests for CreateReservation with any type of body
func NewCreateReservationRequestWithBody(endpoint string, params *CreateReservationParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(endpoint)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/service/v1/reservation")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "marketplaceIds", params.MarketplaceIds); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewCancelReservationRequest generates requests for CancelReservation
func NewCancelReservationRequest(endpoint string, reservationId string, params *CancelReservationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "reservationId", reservationId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(endpoint)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/service/v1/reservation/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "marketplaceIds", params.MarketplaceIds); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateReservationRequest calls the generic UpdateReservation builder with application/json body
func NewUpdateReservationRequest(endpoint string, reservationId string, params *UpdateReservationParams, body UpdateReservationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateReservationRequestWithBody(endpoint, reservationId, params, "application/json", bodyReader)
}

// NewUpdateReservationRequestWithBody generates requests for UpdateReservation with any type of body
func NewUpdateReservationRequestWithBody(endpoint string, reservationId string, params *UpdateReservationParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "reservationId", reservationId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(endpoint)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/service/v1/reservation/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "marketplaceIds", params.MarketplaceIds); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetServiceJobsRequest generates requests for GetServiceJobs
func NewGetServiceJobsRequest(endpoint string, params *GetServiceJobsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(endpoint)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/service/v1/serviceJobs")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.ServiceOrderIds != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "serviceOrderIds", *params.ServiceOrderIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ServiceJobStatus != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "serviceJobStatus", *params.ServiceJobStatus); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageToken != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pageToken", *params.PageToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pageSize", *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortField != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sortField", *params.SortField); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortOrder != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sortOrder", *params.SortOrder); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreatedAfter != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "createdAfter", *params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreatedBefore != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "createdBefore", *params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LastUpdatedAfter != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "lastUpdatedAfter", *params.LastUpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LastUpdatedBefore != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "lastUpdatedBefore", *params.LastUpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ScheduleStartDate != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "scheduleStartDate", *params.ScheduleStartDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ScheduleEndDate != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "scheduleEndDate", *params.ScheduleEndDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParam("form", true, "marketplaceIds", params.MarketplaceIds); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Asins != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "asins", *params.Asins); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RequiredSkills != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "requiredSkills", *params.RequiredSkills); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StoreIds != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "storeIds", *params.StoreIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceJobByServiceJobIdRequest generates requests for GetServiceJobByServiceJobId
func NewGetServiceJobByServiceJobIdRequest(endpoint string, serviceJobId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "serviceJobId", serviceJobId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(endpoint)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/service/v1/serviceJobs/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAppointmmentSlotsByJobIdRequest generates requests for GetAppointmmentSlotsByJobId
func NewGetAppointmmentSlotsByJobIdRequest(endpoint string, serviceJobId string, params *GetAppointmmentSlotsByJobIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "serviceJobId", serviceJobId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(endpoint)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/service/v1/serviceJobs/%s/appointmentSlots", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "marketplaceIds", params.MarketplaceIds); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.StartTime != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "startTime", *params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndTime != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "endTime", *params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddAppointmentForServiceJobByServiceJobIdRequest calls the generic AddAppointmentForServiceJobByServiceJobId builder with application/json body
func NewAddAppointmentForServiceJobByServiceJobIdRequest(endpoint string, serviceJobId string, body AddAppointmentForServiceJobByServiceJobIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddAppointmentForServiceJobByServiceJobIdRequestWithBody(endpoint, serviceJobId, "application/json", bodyReader)
}

// NewAddAppointmentForServiceJobByServiceJobIdRequestWithBody generates requests for AddAppointmentForServiceJobByServiceJobId with any type of body
func NewAddAppointmentForServiceJobByServiceJobIdRequestWithBody(endpoint string, serviceJobId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "serviceJobId", serviceJobId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(endpoint)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/service/v1/serviceJobs/%s/appointments", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewRescheduleAppointmentForServiceJobByServiceJobIdRequest calls the generic RescheduleAppointmentForServiceJobByServiceJobId builder with application/json body
func NewRescheduleAppointmentForServiceJobByServiceJobIdRequest(endpoint string, serviceJobId string, appointmentId string, body RescheduleAppointmentForServiceJobByServiceJobIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRescheduleAppointmentForServiceJobByServiceJobIdRequestWithBody(endpoint, serviceJobId, appointmentId, "application/json", bodyReader)
}

// NewRescheduleAppointmentForServiceJobByServiceJobIdRequestWithBody generates requests for RescheduleAppointmentForServiceJobByServiceJobId with any type of body
func NewRescheduleAppointmentForServiceJobByServiceJobIdRequestWithBody(endpoint string, serviceJobId string, appointmentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "serviceJobId", serviceJobId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "appointmentId", appointmentId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(endpoint)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/service/v1/serviceJobs/%s/appointments/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewSetAppointmentFulfillmentDataRequest calls the generic SetAppointmentFulfillmentData builder with application/json body
func NewSetAppointmentFulfillmentDataRequest(endpoint string, serviceJobId string, appointmentId string, body SetAppointmentFulfillmentDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetAppointmentFulfillmentDataRequestWithBody(endpoint, serviceJobId, appointmentId, "application/json", bodyReader)
}

// NewSetAppointmentFulfillmentDataRequestWithBody generates requests for SetAppointmentFulfillmentData with any type of body
func NewSetAppointmentFulfillmentDataRequestWithBody(endpoint string, serviceJobId string, appointmentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "serviceJobId", serviceJobId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "appointmentId", appointmentId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(endpoint)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/service/v1/serviceJobs/%s/appointments/%s/fulfillment", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewAssignAppointmentResourcesRequest calls the generic AssignAppointmentResources builder with application/json body
func NewAssignAppointmentResourcesRequest(endpoint string, serviceJobId string, appointmentId string, body AssignAppointmentResourcesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAssignAppointmentResourcesRequestWithBody(endpoint, serviceJobId, appointmentId, "application/json", bodyReader)
}

// NewAssignAppointmentResourcesRequestWithBody generates requests for AssignAppointmentResources with any type of body
func NewAssignAppointmentResourcesRequestWithBody(endpoint string, serviceJobId string, appointmentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "serviceJobId", serviceJobId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "appointmentId", appointmentId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(endpoint)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/service/v1/serviceJobs/%s/appointments/%s/resources", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewCancelServiceJobByServiceJobIdRequest generates requests for CancelServiceJobByServiceJobId
func NewCancelServiceJobByServiceJobIdRequest(endpoint string, serviceJobId string, params *CancelServiceJobByServiceJobIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "serviceJobId", serviceJobId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(endpoint)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/service/v1/serviceJobs/%s/cancellations", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "cancellationReasonCode", params.CancellationReasonCode); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCompleteServiceJobByServiceJobIdRequest generates requests for CompleteServiceJobByServiceJobId
func NewCompleteServiceJobByServiceJobIdRequest(endpoint string, serviceJobId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "serviceJobId", serviceJobId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(endpoint)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/service/v1/serviceJobs/%s/completions", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFixedSlotCapacityRequest calls the generic GetFixedSlotCapacity builder with application/json body
func NewGetFixedSlotCapacityRequest(endpoint string, resourceId string, params *GetFixedSlotCapacityParams, body GetFixedSlotCapacityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetFixedSlotCapacityRequestWithBody(endpoint, resourceId, params, "application/json", bodyReader)
}

// NewGetFixedSlotCapacityRequestWithBody generates requests for GetFixedSlotCapacity with any type of body
func NewGetFixedSlotCapacityRequestWithBody(endpoint string, resourceId string, params *GetFixedSlotCapacityParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "resourceId", resourceId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(endpoint)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/service/v1/serviceResources/%s/capacity/fixed", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "marketplaceIds", params.MarketplaceIds); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.NextPageToken != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "nextPageToken", *params.NextPageToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetRangeSlotCapacityRequest calls the generic GetRangeSlotCapacity builder with application/json body
func NewGetRangeSlotCapacityRequest(endpoint string, resourceId string, params *GetRangeSlotCapacityParams, body GetRangeSlotCapacityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetRangeSlotCapacityRequestWithBody(endpoint, resourceId, params, "application/json", bodyReader)
}

// NewGetRangeSlotCapacityRequestWithBody generates requests for GetRangeSlotCapacity with any type of body
func NewGetRangeSlotCapacityRequestWithBody(endpoint string, resourceId string, params *GetRangeSlotCapacityParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "resourceId", resourceId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(endpoint)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/service/v1/serviceResources/%s/capacity/range", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "marketplaceIds", params.MarketplaceIds); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.NextPageToken != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "nextPageToken", *params.NextPageToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewUpdateScheduleRequest calls the generic UpdateSchedule builder with application/json body
func NewUpdateScheduleRequest(endpoint string, resourceId string, params *UpdateScheduleParams, body UpdateScheduleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateScheduleRequestWithBody(endpoint, resourceId, params, "application/json", bodyReader)
}

// NewUpdateScheduleRequestWithBody generates requests for UpdateSchedule with any type of body
func NewUpdateScheduleRequestWithBody(endpoint string, resourceId string, params *UpdateScheduleParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "resourceId", resourceId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(endpoint)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/service/v1/serviceResources/%s/schedules", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "marketplaceIds", params.MarketplaceIds); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(endpoint string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(endpoint, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Endpoint = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAppointmentSlots request
	GetAppointmentSlotsWithResponse(ctx context.Context, params *GetAppointmentSlotsParams) (*GetAppointmentSlotsResp, error)

	// CreateServiceDocumentUploadDestination request  with any body
	CreateServiceDocumentUploadDestinationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateServiceDocumentUploadDestinationResp, error)

	CreateServiceDocumentUploadDestinationWithResponse(ctx context.Context, body CreateServiceDocumentUploadDestinationJSONRequestBody) (*CreateServiceDocumentUploadDestinationResp, error)

	// CreateReservation request  with any body
	CreateReservationWithBodyWithResponse(ctx context.Context, params *CreateReservationParams, contentType string, body io.Reader) (*CreateReservationResp, error)

	CreateReservationWithResponse(ctx context.Context, params *CreateReservationParams, body CreateReservationJSONRequestBody) (*CreateReservationResp, error)

	// CancelReservation request
	CancelReservationWithResponse(ctx context.Context, reservationId string, params *CancelReservationParams) (*CancelReservationResp, error)

	// UpdateReservation request  with any body
	UpdateReservationWithBodyWithResponse(ctx context.Context, reservationId string, params *UpdateReservationParams, contentType string, body io.Reader) (*UpdateReservationResp, error)

	UpdateReservationWithResponse(ctx context.Context, reservationId string, params *UpdateReservationParams, body UpdateReservationJSONRequestBody) (*UpdateReservationResp, error)

	// GetServiceJobs request
	GetServiceJobsWithResponse(ctx context.Context, params *GetServiceJobsParams) (*GetServiceJobsResp, error)

	// GetServiceJobByServiceJobId request
	GetServiceJobByServiceJobIdWithResponse(ctx context.Context, serviceJobId string) (*GetServiceJobByServiceJobIdResp, error)

	// GetAppointmmentSlotsByJobId request
	GetAppointmmentSlotsByJobIdWithResponse(ctx context.Context, serviceJobId string, params *GetAppointmmentSlotsByJobIdParams) (*GetAppointmmentSlotsByJobIdResp, error)

	// AddAppointmentForServiceJobByServiceJobId request  with any body
	AddAppointmentForServiceJobByServiceJobIdWithBodyWithResponse(ctx context.Context, serviceJobId string, contentType string, body io.Reader) (*AddAppointmentForServiceJobByServiceJobIdResp, error)

	AddAppointmentForServiceJobByServiceJobIdWithResponse(ctx context.Context, serviceJobId string, body AddAppointmentForServiceJobByServiceJobIdJSONRequestBody) (*AddAppointmentForServiceJobByServiceJobIdResp, error)

	// RescheduleAppointmentForServiceJobByServiceJobId request  with any body
	RescheduleAppointmentForServiceJobByServiceJobIdWithBodyWithResponse(ctx context.Context, serviceJobId string, appointmentId string, contentType string, body io.Reader) (*RescheduleAppointmentForServiceJobByServiceJobIdResp, error)

	RescheduleAppointmentForServiceJobByServiceJobIdWithResponse(ctx context.Context, serviceJobId string, appointmentId string, body RescheduleAppointmentForServiceJobByServiceJobIdJSONRequestBody) (*RescheduleAppointmentForServiceJobByServiceJobIdResp, error)

	// SetAppointmentFulfillmentData request  with any body
	SetAppointmentFulfillmentDataWithBodyWithResponse(ctx context.Context, serviceJobId string, appointmentId string, contentType string, body io.Reader) (*SetAppointmentFulfillmentDataResp, error)

	SetAppointmentFulfillmentDataWithResponse(ctx context.Context, serviceJobId string, appointmentId string, body SetAppointmentFulfillmentDataJSONRequestBody) (*SetAppointmentFulfillmentDataResp, error)

	// AssignAppointmentResources request  with any body
	AssignAppointmentResourcesWithBodyWithResponse(ctx context.Context, serviceJobId string, appointmentId string, contentType string, body io.Reader) (*AssignAppointmentResourcesResp, error)

	AssignAppointmentResourcesWithResponse(ctx context.Context, serviceJobId string, appointmentId string, body AssignAppointmentResourcesJSONRequestBody) (*AssignAppointmentResourcesResp, error)

	// CancelServiceJobByServiceJobId request
	CancelServiceJobByServiceJobIdWithResponse(ctx context.Context, serviceJobId string, params *CancelServiceJobByServiceJobIdParams) (*CancelServiceJobByServiceJobIdResp, error)

	// CompleteServiceJobByServiceJobId request
	CompleteServiceJobByServiceJobIdWithResponse(ctx context.Context, serviceJobId string) (*CompleteServiceJobByServiceJobIdResp, error)

	// GetFixedSlotCapacity request  with any body
	GetFixedSlotCapacityWithBodyWithResponse(ctx context.Context, resourceId string, params *GetFixedSlotCapacityParams, contentType string, body io.Reader) (*GetFixedSlotCapacityResp, error)

	GetFixedSlotCapacityWithResponse(ctx context.Context, resourceId string, params *GetFixedSlotCapacityParams, body GetFixedSlotCapacityJSONRequestBody) (*GetFixedSlotCapacityResp, error)

	// GetRangeSlotCapacity request  with any body
	GetRangeSlotCapacityWithBodyWithResponse(ctx context.Context, resourceId string, params *GetRangeSlotCapacityParams, contentType string, body io.Reader) (*GetRangeSlotCapacityResp, error)

	GetRangeSlotCapacityWithResponse(ctx context.Context, resourceId string, params *GetRangeSlotCapacityParams, body GetRangeSlotCapacityJSONRequestBody) (*GetRangeSlotCapacityResp, error)

	// UpdateSchedule request  with any body
	UpdateScheduleWithBodyWithResponse(ctx context.Context, resourceId string, params *UpdateScheduleParams, contentType string, body io.Reader) (*UpdateScheduleResp, error)

	UpdateScheduleWithResponse(ctx context.Context, resourceId string, params *UpdateScheduleParams, body UpdateScheduleJSONRequestBody) (*UpdateScheduleResp, error)
}

type GetAppointmentSlotsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetAppointmentSlotsResponse
	JSON400      *GetAppointmentSlotsResponse
	JSON403      *GetAppointmentSlotsResponse
	JSON404      *GetAppointmentSlotsResponse
	JSON415      *GetAppointmentSlotsResponse
	JSON422      *GetAppointmentSlotsResponse
	JSON429      *GetAppointmentSlotsResponse
	JSON500      *GetAppointmentSlotsResponse
	JSON503      *GetAppointmentSlotsResponse
}

// Status returns HTTPResponse.Status
func (r GetAppointmentSlotsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAppointmentSlotsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateServiceDocumentUploadDestinationResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateServiceDocumentUploadDestination
	JSON400      *CreateServiceDocumentUploadDestination
	JSON403      *CreateServiceDocumentUploadDestination
	JSON404      *CreateServiceDocumentUploadDestination
	JSON413      *CreateServiceDocumentUploadDestination
	JSON415      *CreateServiceDocumentUploadDestination
	JSON422      *CreateServiceDocumentUploadDestination
	JSON429      *CreateServiceDocumentUploadDestination
	JSON500      *CreateServiceDocumentUploadDestination
	JSON503      *CreateServiceDocumentUploadDestination
}

// Status returns HTTPResponse.Status
func (r CreateServiceDocumentUploadDestinationResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateServiceDocumentUploadDestinationResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateReservationResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateReservationResponse
	JSON400      *CreateReservationResponse
	JSON403      *CreateReservationResponse
	JSON404      *CreateReservationResponse
	JSON413      *CreateReservationResponse
	JSON415      *CreateReservationResponse
	JSON429      *CreateReservationResponse
	JSON500      *CreateReservationResponse
	JSON503      *CreateReservationResponse
}

// Status returns HTTPResponse.Status
func (r CreateReservationResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateReservationResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelReservationResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *CancelReservationResponse
	JSON400      *CancelReservationResponse
	JSON403      *CancelReservationResponse
	JSON404      *CancelReservationResponse
	JSON413      *CancelReservationResponse
	JSON415      *CancelReservationResponse
	JSON429      *CancelReservationResponse
	JSON500      *CancelReservationResponse
	JSON503      *CancelReservationResponse
}

// Status returns HTTPResponse.Status
func (r CancelReservationResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelReservationResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateReservationResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateReservationResponse
	JSON400      *UpdateReservationResponse
	JSON403      *UpdateReservationResponse
	JSON404      *UpdateReservationResponse
	JSON413      *UpdateReservationResponse
	JSON415      *UpdateReservationResponse
	JSON429      *UpdateReservationResponse
	JSON500      *UpdateReservationResponse
	JSON503      *UpdateReservationResponse
}

// Status returns HTTPResponse.Status
func (r UpdateReservationResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateReservationResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceJobsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetServiceJobsResponse
	JSON400      *GetServiceJobsResponse
	JSON403      *GetServiceJobsResponse
	JSON404      *GetServiceJobsResponse
	JSON413      *GetServiceJobsResponse
	JSON415      *GetServiceJobsResponse
	JSON429      *GetServiceJobsResponse
	JSON500      *GetServiceJobsResponse
	JSON503      *GetServiceJobsResponse
}

// Status returns HTTPResponse.Status
func (r GetServiceJobsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceJobsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceJobByServiceJobIdResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetServiceJobByServiceJobIdResponse
	JSON400      *GetServiceJobByServiceJobIdResponse
	JSON403      *GetServiceJobByServiceJobIdResponse
	JSON404      *GetServiceJobByServiceJobIdResponse
	JSON413      *GetServiceJobByServiceJobIdResponse
	JSON415      *GetServiceJobByServiceJobIdResponse
	JSON422      *GetServiceJobByServiceJobIdResponse
	JSON429      *GetServiceJobByServiceJobIdResponse
	JSON500      *GetServiceJobByServiceJobIdResponse
	JSON503      *GetServiceJobByServiceJobIdResponse
}

// Status returns HTTPResponse.Status
func (r GetServiceJobByServiceJobIdResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceJobByServiceJobIdResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAppointmmentSlotsByJobIdResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetAppointmentSlotsResponse
	JSON400      *GetAppointmentSlotsResponse
	JSON403      *GetAppointmentSlotsResponse
	JSON404      *GetAppointmentSlotsResponse
	JSON415      *GetAppointmentSlotsResponse
	JSON422      *GetAppointmentSlotsResponse
	JSON429      *GetAppointmentSlotsResponse
	JSON500      *GetAppointmentSlotsResponse
	JSON503      *GetAppointmentSlotsResponse
}

// Status returns HTTPResponse.Status
func (r GetAppointmmentSlotsByJobIdResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAppointmmentSlotsByJobIdResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddAppointmentForServiceJobByServiceJobIdResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SetAppointmentResponse
	JSON400      *SetAppointmentResponse
	JSON403      *SetAppointmentResponse
	JSON404      *SetAppointmentResponse
	JSON413      *SetAppointmentResponse
	JSON415      *SetAppointmentResponse
	JSON422      *SetAppointmentResponse
	JSON429      *SetAppointmentResponse
	JSON500      *SetAppointmentResponse
	JSON503      *SetAppointmentResponse
}

// Status returns HTTPResponse.Status
func (r AddAppointmentForServiceJobByServiceJobIdResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddAppointmentForServiceJobByServiceJobIdResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RescheduleAppointmentForServiceJobByServiceJobIdResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SetAppointmentResponse
	JSON400      *SetAppointmentResponse
	JSON403      *SetAppointmentResponse
	JSON404      *SetAppointmentResponse
	JSON413      *SetAppointmentResponse
	JSON415      *SetAppointmentResponse
	JSON422      *SetAppointmentResponse
	JSON429      *SetAppointmentResponse
	JSON500      *SetAppointmentResponse
	JSON503      *SetAppointmentResponse
}

// Status returns HTTPResponse.Status
func (r RescheduleAppointmentForServiceJobByServiceJobIdResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RescheduleAppointmentForServiceJobByServiceJobIdResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetAppointmentFulfillmentDataResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *string
	JSON400      *ErrorList
	JSON403      *ErrorList
	JSON404      *ErrorList
	JSON413      *ErrorList
	JSON415      *ErrorList
	JSON422      *ErrorList
	JSON429      *ErrorList
	JSON500      *ErrorList
	JSON503      *ErrorList
}

// Status returns HTTPResponse.Status
func (r SetAppointmentFulfillmentDataResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetAppointmentFulfillmentDataResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AssignAppointmentResourcesResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AssignAppointmentResourcesResponse
	JSON400      *AssignAppointmentResourcesResponse
	JSON403      *AssignAppointmentResourcesResponse
	JSON404      *AssignAppointmentResourcesResponse
	JSON413      *AssignAppointmentResourcesResponse
	JSON415      *AssignAppointmentResourcesResponse
	JSON422      *AssignAppointmentResourcesResponse
	JSON429      *AssignAppointmentResourcesResponse
	JSON500      *AssignAppointmentResourcesResponse
	JSON503      *AssignAppointmentResourcesResponse
}

// Status returns HTTPResponse.Status
func (r AssignAppointmentResourcesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AssignAppointmentResourcesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelServiceJobByServiceJobIdResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CancelServiceJobByServiceJobIdResponse
	JSON400      *CancelServiceJobByServiceJobIdResponse
	JSON403      *CancelServiceJobByServiceJobIdResponse
	JSON404      *CancelServiceJobByServiceJobIdResponse
	JSON413      *CancelServiceJobByServiceJobIdResponse
	JSON415      *CancelServiceJobByServiceJobIdResponse
	JSON422      *CancelServiceJobByServiceJobIdResponse
	JSON429      *CancelServiceJobByServiceJobIdResponse
	JSON500      *CancelServiceJobByServiceJobIdResponse
	JSON503      *CancelServiceJobByServiceJobIdResponse
}

// Status returns HTTPResponse.Status
func (r CancelServiceJobByServiceJobIdResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelServiceJobByServiceJobIdResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CompleteServiceJobByServiceJobIdResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CompleteServiceJobByServiceJobIdResponse
	JSON400      *CompleteServiceJobByServiceJobIdResponse
	JSON403      *CompleteServiceJobByServiceJobIdResponse
	JSON404      *CompleteServiceJobByServiceJobIdResponse
	JSON413      *CompleteServiceJobByServiceJobIdResponse
	JSON415      *CompleteServiceJobByServiceJobIdResponse
	JSON422      *CompleteServiceJobByServiceJobIdResponse
	JSON429      *CompleteServiceJobByServiceJobIdResponse
	JSON500      *CompleteServiceJobByServiceJobIdResponse
	JSON503      *CompleteServiceJobByServiceJobIdResponse
}

// Status returns HTTPResponse.Status
func (r CompleteServiceJobByServiceJobIdResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CompleteServiceJobByServiceJobIdResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFixedSlotCapacityResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FixedSlotCapacity
	JSON400      *FixedSlotCapacityErrors
	JSON401      *FixedSlotCapacityErrors
	JSON403      *FixedSlotCapacityErrors
	JSON404      *FixedSlotCapacityErrors
	JSON413      *FixedSlotCapacityErrors
	JSON415      *FixedSlotCapacityErrors
	JSON429      *FixedSlotCapacityErrors
	JSON500      *FixedSlotCapacityErrors
	JSON503      *FixedSlotCapacityErrors
}

// Status returns HTTPResponse.Status
func (r GetFixedSlotCapacityResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFixedSlotCapacityResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRangeSlotCapacityResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RangeSlotCapacity
	JSON400      *RangeSlotCapacityErrors
	JSON401      *RangeSlotCapacityErrors
	JSON403      *RangeSlotCapacityErrors
	JSON404      *RangeSlotCapacityErrors
	JSON413      *RangeSlotCapacityErrors
	JSON415      *RangeSlotCapacityErrors
	JSON429      *RangeSlotCapacityErrors
	JSON500      *RangeSlotCapacityErrors
	JSON503      *RangeSlotCapacityErrors
}

// Status returns HTTPResponse.Status
func (r GetRangeSlotCapacityResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRangeSlotCapacityResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateScheduleResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateScheduleResponse
	JSON400      *UpdateScheduleResponse
	JSON403      *UpdateScheduleResponse
	JSON404      *UpdateScheduleResponse
	JSON413      *UpdateScheduleResponse
	JSON415      *UpdateScheduleResponse
	JSON429      *UpdateScheduleResponse
	JSON500      *UpdateScheduleResponse
	JSON503      *UpdateScheduleResponse
}

// Status returns HTTPResponse.Status
func (r UpdateScheduleResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateScheduleResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAppointmentSlotsWithResponse request returning *GetAppointmentSlotsResponse
func (c *ClientWithResponses) GetAppointmentSlotsWithResponse(ctx context.Context, params *GetAppointmentSlotsParams) (*GetAppointmentSlotsResp, error) {
	rsp, err := c.GetAppointmentSlots(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetAppointmentSlotsResp(rsp)
}

// CreateServiceDocumentUploadDestinationWithBodyWithResponse request with arbitrary body returning *CreateServiceDocumentUploadDestinationResponse
func (c *ClientWithResponses) CreateServiceDocumentUploadDestinationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateServiceDocumentUploadDestinationResp, error) {
	rsp, err := c.CreateServiceDocumentUploadDestinationWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateServiceDocumentUploadDestinationResp(rsp)
}

func (c *ClientWithResponses) CreateServiceDocumentUploadDestinationWithResponse(ctx context.Context, body CreateServiceDocumentUploadDestinationJSONRequestBody) (*CreateServiceDocumentUploadDestinationResp, error) {
	rsp, err := c.CreateServiceDocumentUploadDestination(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateServiceDocumentUploadDestinationResp(rsp)
}

// CreateReservationWithBodyWithResponse request with arbitrary body returning *CreateReservationResponse
func (c *ClientWithResponses) CreateReservationWithBodyWithResponse(ctx context.Context, params *CreateReservationParams, contentType string, body io.Reader) (*CreateReservationResp, error) {
	rsp, err := c.CreateReservationWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateReservationResp(rsp)
}

func (c *ClientWithResponses) CreateReservationWithResponse(ctx context.Context, params *CreateReservationParams, body CreateReservationJSONRequestBody) (*CreateReservationResp, error) {
	rsp, err := c.CreateReservation(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateReservationResp(rsp)
}

// CancelReservationWithResponse request returning *CancelReservationResponse
func (c *ClientWithResponses) CancelReservationWithResponse(ctx context.Context, reservationId string, params *CancelReservationParams) (*CancelReservationResp, error) {
	rsp, err := c.CancelReservation(ctx, reservationId, params)
	if err != nil {
		return nil, err
	}
	return ParseCancelReservationResp(rsp)
}

// UpdateReservationWithBodyWithResponse request with arbitrary body returning *UpdateReservationResponse
func (c *ClientWithResponses) UpdateReservationWithBodyWithResponse(ctx context.Context, reservationId string, params *UpdateReservationParams, contentType string, body io.Reader) (*UpdateReservationResp, error) {
	rsp, err := c.UpdateReservationWithBody(ctx, reservationId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateReservationResp(rsp)
}

func (c *ClientWithResponses) UpdateReservationWithResponse(ctx context.Context, reservationId string, params *UpdateReservationParams, body UpdateReservationJSONRequestBody) (*UpdateReservationResp, error) {
	rsp, err := c.UpdateReservation(ctx, reservationId, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateReservationResp(rsp)
}

// GetServiceJobsWithResponse request returning *GetServiceJobsResponse
func (c *ClientWithResponses) GetServiceJobsWithResponse(ctx context.Context, params *GetServiceJobsParams) (*GetServiceJobsResp, error) {
	rsp, err := c.GetServiceJobs(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceJobsResp(rsp)
}

// GetServiceJobByServiceJobIdWithResponse request returning *GetServiceJobByServiceJobIdResponse
func (c *ClientWithResponses) GetServiceJobByServiceJobIdWithResponse(ctx context.Context, serviceJobId string) (*GetServiceJobByServiceJobIdResp, error) {
	rsp, err := c.GetServiceJobByServiceJobId(ctx, serviceJobId)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceJobByServiceJobIdResp(rsp)
}

// GetAppointmmentSlotsByJobIdWithResponse request returning *GetAppointmmentSlotsByJobIdResponse
func (c *ClientWithResponses) GetAppointmmentSlotsByJobIdWithResponse(ctx context.Context, serviceJobId string, params *GetAppointmmentSlotsByJobIdParams) (*GetAppointmmentSlotsByJobIdResp, error) {
	rsp, err := c.GetAppointmmentSlotsByJobId(ctx, serviceJobId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetAppointmmentSlotsByJobIdResp(rsp)
}

// AddAppointmentForServiceJobByServiceJobIdWithBodyWithResponse request with arbitrary body returning *AddAppointmentForServiceJobByServiceJobIdResponse
func (c *ClientWithResponses) AddAppointmentForServiceJobByServiceJobIdWithBodyWithResponse(ctx context.Context, serviceJobId string, contentType string, body io.Reader) (*AddAppointmentForServiceJobByServiceJobIdResp, error) {
	rsp, err := c.AddAppointmentForServiceJobByServiceJobIdWithBody(ctx, serviceJobId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseAddAppointmentForServiceJobByServiceJobIdResp(rsp)
}

func (c *ClientWithResponses) AddAppointmentForServiceJobByServiceJobIdWithResponse(ctx context.Context, serviceJobId string, body AddAppointmentForServiceJobByServiceJobIdJSONRequestBody) (*AddAppointmentForServiceJobByServiceJobIdResp, error) {
	rsp, err := c.AddAppointmentForServiceJobByServiceJobId(ctx, serviceJobId, body)
	if err != nil {
		return nil, err
	}
	return ParseAddAppointmentForServiceJobByServiceJobIdResp(rsp)
}

// RescheduleAppointmentForServiceJobByServiceJobIdWithBodyWithResponse request with arbitrary body returning *RescheduleAppointmentForServiceJobByServiceJobIdResponse
func (c *ClientWithResponses) RescheduleAppointmentForServiceJobByServiceJobIdWithBodyWithResponse(ctx context.Context, serviceJobId string, appointmentId string, contentType string, body io.Reader) (*RescheduleAppointmentForServiceJobByServiceJobIdResp, error) {
	rsp, err := c.RescheduleAppointmentForServiceJobByServiceJobIdWithBody(ctx, serviceJobId, appointmentId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseRescheduleAppointmentForServiceJobByServiceJobIdResp(rsp)
}

func (c *ClientWithResponses) RescheduleAppointmentForServiceJobByServiceJobIdWithResponse(ctx context.Context, serviceJobId string, appointmentId string, body RescheduleAppointmentForServiceJobByServiceJobIdJSONRequestBody) (*RescheduleAppointmentForServiceJobByServiceJobIdResp, error) {
	rsp, err := c.RescheduleAppointmentForServiceJobByServiceJobId(ctx, serviceJobId, appointmentId, body)
	if err != nil {
		return nil, err
	}
	return ParseRescheduleAppointmentForServiceJobByServiceJobIdResp(rsp)
}

// SetAppointmentFulfillmentDataWithBodyWithResponse request with arbitrary body returning *SetAppointmentFulfillmentDataResponse
func (c *ClientWithResponses) SetAppointmentFulfillmentDataWithBodyWithResponse(ctx context.Context, serviceJobId string, appointmentId string, contentType string, body io.Reader) (*SetAppointmentFulfillmentDataResp, error) {
	rsp, err := c.SetAppointmentFulfillmentDataWithBody(ctx, serviceJobId, appointmentId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseSetAppointmentFulfillmentDataResp(rsp)
}

func (c *ClientWithResponses) SetAppointmentFulfillmentDataWithResponse(ctx context.Context, serviceJobId string, appointmentId string, body SetAppointmentFulfillmentDataJSONRequestBody) (*SetAppointmentFulfillmentDataResp, error) {
	rsp, err := c.SetAppointmentFulfillmentData(ctx, serviceJobId, appointmentId, body)
	if err != nil {
		return nil, err
	}
	return ParseSetAppointmentFulfillmentDataResp(rsp)
}

// AssignAppointmentResourcesWithBodyWithResponse request with arbitrary body returning *AssignAppointmentResourcesResponse
func (c *ClientWithResponses) AssignAppointmentResourcesWithBodyWithResponse(ctx context.Context, serviceJobId string, appointmentId string, contentType string, body io.Reader) (*AssignAppointmentResourcesResp, error) {
	rsp, err := c.AssignAppointmentResourcesWithBody(ctx, serviceJobId, appointmentId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseAssignAppointmentResourcesResp(rsp)
}

func (c *ClientWithResponses) AssignAppointmentResourcesWithResponse(ctx context.Context, serviceJobId string, appointmentId string, body AssignAppointmentResourcesJSONRequestBody) (*AssignAppointmentResourcesResp, error) {
	rsp, err := c.AssignAppointmentResources(ctx, serviceJobId, appointmentId, body)
	if err != nil {
		return nil, err
	}
	return ParseAssignAppointmentResourcesResp(rsp)
}

// CancelServiceJobByServiceJobIdWithResponse request returning *CancelServiceJobByServiceJobIdResponse
func (c *ClientWithResponses) CancelServiceJobByServiceJobIdWithResponse(ctx context.Context, serviceJobId string, params *CancelServiceJobByServiceJobIdParams) (*CancelServiceJobByServiceJobIdResp, error) {
	rsp, err := c.CancelServiceJobByServiceJobId(ctx, serviceJobId, params)
	if err != nil {
		return nil, err
	}
	return ParseCancelServiceJobByServiceJobIdResp(rsp)
}

// CompleteServiceJobByServiceJobIdWithResponse request returning *CompleteServiceJobByServiceJobIdResponse
func (c *ClientWithResponses) CompleteServiceJobByServiceJobIdWithResponse(ctx context.Context, serviceJobId string) (*CompleteServiceJobByServiceJobIdResp, error) {
	rsp, err := c.CompleteServiceJobByServiceJobId(ctx, serviceJobId)
	if err != nil {
		return nil, err
	}
	return ParseCompleteServiceJobByServiceJobIdResp(rsp)
}

// GetFixedSlotCapacityWithBodyWithResponse request with arbitrary body returning *GetFixedSlotCapacityResponse
func (c *ClientWithResponses) GetFixedSlotCapacityWithBodyWithResponse(ctx context.Context, resourceId string, params *GetFixedSlotCapacityParams, contentType string, body io.Reader) (*GetFixedSlotCapacityResp, error) {
	rsp, err := c.GetFixedSlotCapacityWithBody(ctx, resourceId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseGetFixedSlotCapacityResp(rsp)
}

func (c *ClientWithResponses) GetFixedSlotCapacityWithResponse(ctx context.Context, resourceId string, params *GetFixedSlotCapacityParams, body GetFixedSlotCapacityJSONRequestBody) (*GetFixedSlotCapacityResp, error) {
	rsp, err := c.GetFixedSlotCapacity(ctx, resourceId, params, body)
	if err != nil {
		return nil, err
	}
	return ParseGetFixedSlotCapacityResp(rsp)
}

// GetRangeSlotCapacityWithBodyWithResponse request with arbitrary body returning *GetRangeSlotCapacityResponse
func (c *ClientWithResponses) GetRangeSlotCapacityWithBodyWithResponse(ctx context.Context, resourceId string, params *GetRangeSlotCapacityParams, contentType string, body io.Reader) (*GetRangeSlotCapacityResp, error) {
	rsp, err := c.GetRangeSlotCapacityWithBody(ctx, resourceId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseGetRangeSlotCapacityResp(rsp)
}

func (c *ClientWithResponses) GetRangeSlotCapacityWithResponse(ctx context.Context, resourceId string, params *GetRangeSlotCapacityParams, body GetRangeSlotCapacityJSONRequestBody) (*GetRangeSlotCapacityResp, error) {
	rsp, err := c.GetRangeSlotCapacity(ctx, resourceId, params, body)
	if err != nil {
		return nil, err
	}
	return ParseGetRangeSlotCapacityResp(rsp)
}

// UpdateScheduleWithBodyWithResponse request with arbitrary body returning *UpdateScheduleResponse
func (c *ClientWithResponses) UpdateScheduleWithBodyWithResponse(ctx context.Context, resourceId string, params *UpdateScheduleParams, contentType string, body io.Reader) (*UpdateScheduleResp, error) {
	rsp, err := c.UpdateScheduleWithBody(ctx, resourceId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateScheduleResp(rsp)
}

func (c *ClientWithResponses) UpdateScheduleWithResponse(ctx context.Context, resourceId string, params *UpdateScheduleParams, body UpdateScheduleJSONRequestBody) (*UpdateScheduleResp, error) {
	rsp, err := c.UpdateSchedule(ctx, resourceId, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateScheduleResp(rsp)
}

// ParseGetAppointmentSlotsResp parses an HTTP response from a GetAppointmentSlotsWithResponse call
func ParseGetAppointmentSlotsResp(rsp *http.Response) (*GetAppointmentSlotsResp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAppointmentSlotsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetAppointmentSlotsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetAppointmentSlotsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetAppointmentSlotsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetAppointmentSlotsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest GetAppointmentSlotsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest GetAppointmentSlotsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest GetAppointmentSlotsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GetAppointmentSlotsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest GetAppointmentSlotsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseCreateServiceDocumentUploadDestinationResp parses an HTTP response from a CreateServiceDocumentUploadDestinationWithResponse call
func ParseCreateServiceDocumentUploadDestinationResp(rsp *http.Response) (*CreateServiceDocumentUploadDestinationResp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateServiceDocumentUploadDestinationResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateServiceDocumentUploadDestination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CreateServiceDocumentUploadDestination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CreateServiceDocumentUploadDestination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CreateServiceDocumentUploadDestination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest CreateServiceDocumentUploadDestination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest CreateServiceDocumentUploadDestination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest CreateServiceDocumentUploadDestination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest CreateServiceDocumentUploadDestination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CreateServiceDocumentUploadDestination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest CreateServiceDocumentUploadDestination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseCreateReservationResp parses an HTTP response from a CreateReservationWithResponse call
func ParseCreateReservationResp(rsp *http.Response) (*CreateReservationResp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateReservationResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateReservationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CreateReservationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CreateReservationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CreateReservationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest CreateReservationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest CreateReservationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest CreateReservationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CreateReservationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest CreateReservationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseCancelReservationResp parses an HTTP response from a CancelReservationWithResponse call
func ParseCancelReservationResp(rsp *http.Response) (*CancelReservationResp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CancelReservationResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest CancelReservationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CancelReservationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CancelReservationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CancelReservationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest CancelReservationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest CancelReservationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest CancelReservationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CancelReservationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest CancelReservationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseUpdateReservationResp parses an HTTP response from a UpdateReservationWithResponse call
func ParseUpdateReservationResp(rsp *http.Response) (*UpdateReservationResp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateReservationResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateReservationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UpdateReservationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest UpdateReservationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest UpdateReservationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest UpdateReservationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UpdateReservationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest UpdateReservationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UpdateReservationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest UpdateReservationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetServiceJobsResp parses an HTTP response from a GetServiceJobsWithResponse call
func ParseGetServiceJobsResp(rsp *http.Response) (*GetServiceJobsResp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetServiceJobsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetServiceJobsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetServiceJobsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetServiceJobsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetServiceJobsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest GetServiceJobsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest GetServiceJobsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest GetServiceJobsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GetServiceJobsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest GetServiceJobsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetServiceJobByServiceJobIdResp parses an HTTP response from a GetServiceJobByServiceJobIdWithResponse call
func ParseGetServiceJobByServiceJobIdResp(rsp *http.Response) (*GetServiceJobByServiceJobIdResp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetServiceJobByServiceJobIdResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest GetServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest GetServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest GetServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest GetServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GetServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest GetServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetAppointmmentSlotsByJobIdResp parses an HTTP response from a GetAppointmmentSlotsByJobIdWithResponse call
func ParseGetAppointmmentSlotsByJobIdResp(rsp *http.Response) (*GetAppointmmentSlotsByJobIdResp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAppointmmentSlotsByJobIdResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetAppointmentSlotsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetAppointmentSlotsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetAppointmentSlotsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetAppointmentSlotsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest GetAppointmentSlotsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest GetAppointmentSlotsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest GetAppointmentSlotsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GetAppointmentSlotsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest GetAppointmentSlotsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseAddAppointmentForServiceJobByServiceJobIdResp parses an HTTP response from a AddAppointmentForServiceJobByServiceJobIdWithResponse call
func ParseAddAppointmentForServiceJobByServiceJobIdResp(rsp *http.Response) (*AddAppointmentForServiceJobByServiceJobIdResp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AddAppointmentForServiceJobByServiceJobIdResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SetAppointmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SetAppointmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SetAppointmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SetAppointmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest SetAppointmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest SetAppointmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest SetAppointmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SetAppointmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SetAppointmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest SetAppointmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseRescheduleAppointmentForServiceJobByServiceJobIdResp parses an HTTP response from a RescheduleAppointmentForServiceJobByServiceJobIdWithResponse call
func ParseRescheduleAppointmentForServiceJobByServiceJobIdResp(rsp *http.Response) (*RescheduleAppointmentForServiceJobByServiceJobIdResp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RescheduleAppointmentForServiceJobByServiceJobIdResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SetAppointmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SetAppointmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SetAppointmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SetAppointmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest SetAppointmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest SetAppointmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest SetAppointmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SetAppointmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SetAppointmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest SetAppointmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseSetAppointmentFulfillmentDataResp parses an HTTP response from a SetAppointmentFulfillmentDataWithResponse call
func ParseSetAppointmentFulfillmentDataResp(rsp *http.Response) (*SetAppointmentFulfillmentDataResp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SetAppointmentFulfillmentDataResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseAssignAppointmentResourcesResp parses an HTTP response from a AssignAppointmentResourcesWithResponse call
func ParseAssignAppointmentResourcesResp(rsp *http.Response) (*AssignAppointmentResourcesResp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AssignAppointmentResourcesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AssignAppointmentResourcesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest AssignAppointmentResourcesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AssignAppointmentResourcesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest AssignAppointmentResourcesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest AssignAppointmentResourcesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest AssignAppointmentResourcesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest AssignAppointmentResourcesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest AssignAppointmentResourcesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest AssignAppointmentResourcesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest AssignAppointmentResourcesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseCancelServiceJobByServiceJobIdResp parses an HTTP response from a CancelServiceJobByServiceJobIdWithResponse call
func ParseCancelServiceJobByServiceJobIdResp(rsp *http.Response) (*CancelServiceJobByServiceJobIdResp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CancelServiceJobByServiceJobIdResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CancelServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CancelServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CancelServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CancelServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest CancelServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest CancelServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest CancelServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest CancelServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CancelServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest CancelServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseCompleteServiceJobByServiceJobIdResp parses an HTTP response from a CompleteServiceJobByServiceJobIdWithResponse call
func ParseCompleteServiceJobByServiceJobIdResp(rsp *http.Response) (*CompleteServiceJobByServiceJobIdResp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CompleteServiceJobByServiceJobIdResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CompleteServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CompleteServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CompleteServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CompleteServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest CompleteServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest CompleteServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest CompleteServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest CompleteServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CompleteServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest CompleteServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetFixedSlotCapacityResp parses an HTTP response from a GetFixedSlotCapacityWithResponse call
func ParseGetFixedSlotCapacityResp(rsp *http.Response) (*GetFixedSlotCapacityResp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetFixedSlotCapacityResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FixedSlotCapacity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest FixedSlotCapacityErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest FixedSlotCapacityErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest FixedSlotCapacityErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest FixedSlotCapacityErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest FixedSlotCapacityErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest FixedSlotCapacityErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest FixedSlotCapacityErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest FixedSlotCapacityErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest FixedSlotCapacityErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetRangeSlotCapacityResp parses an HTTP response from a GetRangeSlotCapacityWithResponse call
func ParseGetRangeSlotCapacityResp(rsp *http.Response) (*GetRangeSlotCapacityResp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetRangeSlotCapacityResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RangeSlotCapacity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RangeSlotCapacityErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RangeSlotCapacityErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest RangeSlotCapacityErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest RangeSlotCapacityErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest RangeSlotCapacityErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest RangeSlotCapacityErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RangeSlotCapacityErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest RangeSlotCapacityErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest RangeSlotCapacityErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseUpdateScheduleResp parses an HTTP response from a UpdateScheduleWithResponse call
func ParseUpdateScheduleResp(rsp *http.Response) (*UpdateScheduleResp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateScheduleResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateScheduleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UpdateScheduleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest UpdateScheduleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest UpdateScheduleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest UpdateScheduleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UpdateScheduleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest UpdateScheduleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UpdateScheduleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest UpdateScheduleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}
