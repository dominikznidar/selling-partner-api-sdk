// Package notifications provides primitives to interact the openapi HTTP API.
//
// Code generated by go-sdk-codegen DO NOT EDIT.
package notifications

// AggregationFilter defines model for AggregationFilter.
type AggregationFilter struct {

	// A container that holds all of the necessary properties to configure the aggregation of notifications.
	AggregationSettings *AggregationSettings `json:"aggregationSettings,omitempty"`
}

// AggregationSettings defines model for AggregationSettings.
type AggregationSettings struct {

	// The supported aggregation time periods. For example, if FiveMinutes is the value chosen, and 50 price updates occur for an ASIN within 5 minutes, Amazon will send only two notifications; one for the first event, and then a subsequent notification 5 minutes later with the final end state of the data. The 48 interim events will be dropped.
	AggregationTimePeriod AggregationTimePeriod `json:"aggregationTimePeriod"`
}

// AggregationTimePeriod defines model for AggregationTimePeriod.
type AggregationTimePeriod string

// List of AggregationTimePeriod
const (
	AggregationTimePeriod_FiveMinutes AggregationTimePeriod = "FiveMinutes"
	AggregationTimePeriod_TenMinutes  AggregationTimePeriod = "TenMinutes"
)

// CreateDestinationRequest defines model for CreateDestinationRequest.
type CreateDestinationRequest struct {

	// A developer-defined name to help identify this destination.
	Name string `json:"name"`

	// The information required to create a destination resource. Applications should use one resource type (sqs or eventBridge) per destination.
	ResourceSpecification DestinationResourceSpecification `json:"resourceSpecification"`
}

// CreateDestinationResponse defines model for CreateDestinationResponse.
type CreateDestinationResponse struct {

	// A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`

	// Represents a destination created when you call the createDestination operation.
	Payload *Destination `json:"payload,omitempty"`
}

// CreateSubscriptionRequest defines model for CreateSubscriptionRequest.
type CreateSubscriptionRequest struct {

	// The identifier for the destination where notifications will be delivered.
	DestinationId *string `json:"destinationId,omitempty"`

	// The version of the payload object to be used in the notification.
	PayloadVersion *string `json:"payloadVersion,omitempty"`

	// Additional information passed to the subscription to control the processing of notifications. For example, you can use an eventFilter to customize your subscription to send notifications for only the specified marketplaceId's, or select the aggregation time period at which to send notifications (e.g. limit to one notification every five minutes for high frequency notifications). The specific features available vary depending on the notificationType.
	//
	// This feature is limited to specific notificationTypes and is currently only supported by the ANY_OFFER_CHANGED notificationType.
	ProcessingDirective *ProcessingDirective `json:"processingDirective,omitempty"`
}

// CreateSubscriptionResponse defines model for CreateSubscriptionResponse.
type CreateSubscriptionResponse struct {

	// A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`

	// Represents a subscription to receive notifications.
	Payload *Subscription `json:"payload,omitempty"`
}

// DeleteDestinationResponse defines model for DeleteDestinationResponse.
type DeleteDestinationResponse struct {

	// A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`
}

// DeleteSubscriptionByIdResponse defines model for DeleteSubscriptionByIdResponse.
type DeleteSubscriptionByIdResponse struct {

	// A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`
}

// Destination defines model for Destination.
type Destination struct {

	// The destination identifier generated when you created the destination.
	DestinationId string `json:"destinationId"`

	// The developer-defined name for this destination.
	Name string `json:"name"`

	// The destination resource types.
	Resource DestinationResource `json:"resource"`
}

// DestinationList defines model for DestinationList.
type DestinationList []Destination

// DestinationResource defines model for DestinationResource.
type DestinationResource struct {

	// Represents an Amazon EventBridge destination.
	EventBridge *EventBridgeResource `json:"eventBridge,omitempty"`

	// The information required to create an Amazon Simple Queue Service (Amazon SQS) queue destination.
	Sqs *SqsResource `json:"sqs,omitempty"`
}

// DestinationResourceSpecification defines model for DestinationResourceSpecification.
type DestinationResourceSpecification struct {

	// The information required to create an Amazon EventBridge destination.
	EventBridge *EventBridgeResourceSpecification `json:"eventBridge,omitempty"`

	// The information required to create an Amazon Simple Queue Service (Amazon SQS) queue destination.
	Sqs *SqsResource `json:"sqs,omitempty"`
}

// Error defines model for Error.
type Error struct {

	// An error code that identifies the type of error that occurred.
	Code string `json:"code"`

	// Additional details that can help the caller understand or fix the issue.
	Details *string `json:"details,omitempty"`

	// A message that describes the error condition in a human-readable form.
	Message string `json:"message"`
}

// ErrorList defines model for ErrorList.
type ErrorList []Error

// EventBridgeResource defines model for EventBridgeResource.
type EventBridgeResource struct {

	// The identifier for the AWS account that is responsible for charges related to receiving notifications.
	AccountId string `json:"accountId"`

	// The name of the partner event source associated with the destination.
	Name string `json:"name"`

	// The AWS region in which you receive the notifications. For AWS regions that are supported in Amazon EventBridge, see https://docs.aws.amazon.com/general/latest/gr/ev.html.
	Region string `json:"region"`
}

// EventBridgeResourceSpecification defines model for EventBridgeResourceSpecification.
type EventBridgeResourceSpecification struct {

	// The identifier for the AWS account that is responsible for charges related to receiving notifications.
	AccountId string `json:"accountId"`

	// The AWS region in which you will be receiving the notifications.
	Region string `json:"region"`
}

// EventFilter defines model for EventFilter.
type EventFilter struct {
	// Embedded struct due to allOf(#/components/schemas/AggregationFilter)
	AggregationFilter `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/MarketplaceFilter)
	MarketplaceFilter `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// An eventFilterType value that is supported by the specific notificationType. This is used by the subscription service to determine the type of event filter. Refer to the section of the [Notifications Use Case Guide](doc:notifications-api-v1-use-case-guide) that describes the specific notificationType to determine if an eventFilterType is supported.
	EventFilterType string `json:"eventFilterType"`
}

// GetDestinationResponse defines model for GetDestinationResponse.
type GetDestinationResponse struct {

	// A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`

	// Represents a destination created when you call the createDestination operation.
	Payload *Destination `json:"payload,omitempty"`
}

// GetDestinationsResponse defines model for GetDestinationsResponse.
type GetDestinationsResponse struct {

	// A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`

	// A list of destinations.
	Payload *DestinationList `json:"payload,omitempty"`
}

// GetSubscriptionByIdResponse defines model for GetSubscriptionByIdResponse.
type GetSubscriptionByIdResponse struct {

	// A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`

	// Represents a subscription to receive notifications.
	Payload *Subscription `json:"payload,omitempty"`
}

// GetSubscriptionResponse defines model for GetSubscriptionResponse.
type GetSubscriptionResponse struct {

	// A list of error responses returned when a request is unsuccessful.
	Errors *ErrorList `json:"errors,omitempty"`

	// Represents a subscription to receive notifications.
	Payload *Subscription `json:"payload,omitempty"`
}

// MarketplaceFilter defines model for MarketplaceFilter.
type MarketplaceFilter struct {

	// A list of marketplace identifiers to subscribe to (e.g. ATVPDKIKX0DER). To receive notifications in every marketplace, do not provide this list.
	MarketplaceIds *MarketplaceIds `json:"marketplaceIds,omitempty"`
}

// MarketplaceIds defines model for MarketplaceIds.
type MarketplaceIds []string

// ProcessingDirective defines model for ProcessingDirective.
type ProcessingDirective struct {

	// A notificationType specific filter. This object contains all of the currently available filters and properties that you can use to define a notificationType specific filter.
	EventFilter *EventFilter `json:"eventFilter,omitempty"`
}

// SqsResource defines model for SqsResource.
type SqsResource struct {

	// The Amazon Resource Name (ARN) associated with the SQS queue.
	Arn string `json:"arn"`
}

// Subscription defines model for Subscription.
type Subscription struct {

	// The identifier for the destination where notifications will be delivered.
	DestinationId string `json:"destinationId"`

	// The version of the payload object to be used in the notification.
	PayloadVersion string `json:"payloadVersion"`

	// Additional information passed to the subscription to control the processing of notifications. For example, you can use an eventFilter to customize your subscription to send notifications for only the specified marketplaceId's, or select the aggregation time period at which to send notifications (e.g. limit to one notification every five minutes for high frequency notifications). The specific features available vary depending on the notificationType.
	//
	// This feature is limited to specific notificationTypes and is currently only supported by the ANY_OFFER_CHANGED notificationType.
	ProcessingDirective *ProcessingDirective `json:"processingDirective,omitempty"`

	// The subscription identifier generated when the subscription is created.
	SubscriptionId string `json:"subscriptionId"`
}

// NotificationType defines model for NotificationType.
type NotificationType string

// CreateDestinationJSONBody defines parameters for CreateDestination.
type CreateDestinationJSONBody CreateDestinationRequest

// CreateSubscriptionJSONBody defines parameters for CreateSubscription.
type CreateSubscriptionJSONBody CreateSubscriptionRequest

// CreateDestinationRequestBody defines body for CreateDestination for application/json ContentType.
type CreateDestinationJSONRequestBody CreateDestinationJSONBody

// CreateSubscriptionRequestBody defines body for CreateSubscription for application/json ContentType.
type CreateSubscriptionJSONRequestBody CreateSubscriptionJSONBody
